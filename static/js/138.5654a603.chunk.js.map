{"version":3,"file":"static/js/138.5654a603.chunk.js","mappings":"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","sources":["pages/ClientsPage.tsx","services/client.service.ts","components/ClientCard.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { Row, Col, Typography, Input, Button, Space, Segmented, Spin, Alert, Empty } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { getClients, createClient, getAgencyClients } from '../services/client.service';\r\nimport { Client, ClientStatus, CreateClientData } from '../types';\r\nimport ClientCard from '../components/ClientCard';\r\n// import CreateClientForm from '../components/CreateClientForm'; // Мы создадим эту форму позже\r\n\r\nconst { Title, Text } = Typography;\r\nconst { Search } = Input;\r\n\r\nconst ClientsPage: React.FC = () => {\r\n  const [clients, setClients] = useState<Client[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [filter, setFilter] = useState<string | number>('Активные');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const loadClients = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      let data: Client[] = [];\r\n      if (authContext?.user?.role === 'director') {\r\n        data = await getAgencyClients();\r\n      } else {\r\n        data = await getClients();\r\n      }\r\n      setClients(data);\r\n    } catch (err) {\r\n      setError('Не удалось загрузить клиентов.');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadClients();\r\n  }, [authContext?.token]);\r\n\r\n  // const handleCreateClient = async (clientData: CreateClientData) => {\r\n  //   if (!authContext?.token) return;\r\n  //   setLoading(true);\r\n  //   try {\r\n  //     await createClient(clientData, authContext.token);\r\n  //     fetchClients();\r\n  //     setIsModalVisible(false);\r\n  //   } catch (err) {\r\n  //     setError('Не удалось создать клиента.');\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  const activeStatuses = ['new', 'negotiation', 'contract', 'deposit'];\r\n  \r\n  const filteredClients = clients\r\n    .filter(client => {\r\n      if (filter === 'Активные') return activeStatuses.includes(client.status);\r\n      if (filter === 'Удачные сделки') return client.status === 'success';\r\n      if (filter === 'Отказались') return client.status === 'refused';\r\n      return true;\r\n    })\r\n    .filter(client => client.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n\r\n  return (\r\n    <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col>\r\n          <Title level={2} style={{ margin: 0 }}>{authContext?.user?.role === 'director' ? 'Клиенты агентства' : 'Мои клиенты'}</Title>\r\n        </Col>\r\n        <Col>\r\n          <Button data-testid=\"client-add-btn\" type=\"primary\" icon={<PlusOutlined />} onClick={() => setIsModalVisible(true)}>\r\n            Добавить клиента\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Search\r\n        placeholder=\"Поиск клиентов...\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        allowClear\r\n        autoFocus\r\n      />\r\n\r\n      <Segmented\r\n        options={['Активные', 'Удачные сделки', 'Отказались']}\r\n        value={filter}\r\n        onChange={setFilter}\r\n        block\r\n      />\r\n\r\n      {loading ? (\r\n        <Spin size=\"large\" />\r\n      ) : error ? (\r\n        <Alert message={error} type=\"error\" showIcon />\r\n      ) : (\r\n        <>\r\n          <Title level={4}>{filter}</Title>\r\n          <Row gutter={[16, 16]} className=\"staggered-list\">\r\n            {filteredClients.length > 0 ? (\r\n              filteredClients.map(client => (\r\n                <Col xs={24} sm={12} md={8} key={client.id}>\r\n                  <ClientCard client={client} />\r\n                </Col>\r\n              ))\r\n            ) : (\r\n              <Col span={24}>\r\n                <Empty description=\"Клиенты не найдены.\" style={{ marginTop: 60 }} />\r\n              </Col>\r\n            )}\r\n          </Row>\r\n        </>\r\n      )}\r\n\r\n      {/* <Modal\r\n        title=\"Добавить нового клиента\"\r\n        open={isModalVisible}\r\n        onCancel={() => setIsModalVisible(false)}\r\n        footer={null}\r\n      >\r\n        <CreateClientForm\r\n          onSubmit={handleCreateClient}\r\n          onCancel={() => setIsModalVisible(false)}\r\n          loading={loading}\r\n        />\r\n      </Modal> */}\r\n\r\n      <style>{`\r\n        @media (max-width: 767px) {\r\n          .clients-filters {\r\n            flex-direction: column !important;\r\n            gap: 8px !important;\r\n            padding: 12px !important;\r\n          }\r\n          .client-card-col {\r\n            flex: 0 0 100% !important;\r\n            max-width: 100% !important;\r\n          }\r\n          .ant-btn {\r\n            font-size: 18px !important;\r\n            height: 48px !important;\r\n          }\r\n        }\r\n        @media (max-width: 991px) and (min-width: 768px) {\r\n          .client-card-col {\r\n            flex: 0 0 50% !important;\r\n            max-width: 50% !important;\r\n          }\r\n        }\r\n      `}</style>\r\n    </Space>\r\n  );\r\n};\r\n\r\nexport default ClientsPage; ","import api from './api';\r\nimport { Client, PaginatedResponse, FilterOptions } from '../types';\r\n\r\nexport const getClients = async (filters?: FilterOptions): Promise<Client[]> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/clients?${params.toString()}`);\r\n  // Унифицируем: если data - массив, возвращаем его, если объект с .clients - возвращаем его\r\n  if (Array.isArray(response.data)) return response.data;\r\n  if (response.data && Array.isArray(response.data.clients)) return response.data.clients;\r\n  return [];\r\n};\r\n\r\nexport const getClientById = async (id: number): Promise<Client> => {\r\n  const response = await api.get(`/api/clients/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const createClient = async (clientData: Partial<Client>): Promise<Client> => {\r\n  const response = await api.post('/api/clients', clientData);\r\n  return response.data;\r\n};\r\n\r\nexport const updateClient = async (id: number, clientData: Partial<Client>): Promise<Client> => {\r\n  const response = await api.patch(`/api/clients/${id}`, clientData);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteClient = async (id: number): Promise<void> => {\r\n  await api.delete(`/api/clients/${id}`);\r\n};\r\n\r\nexport const getMyClients = async (): Promise<Client[]> => {\r\n  const response = await api.get('/api/clients/my');\r\n  return response.data;\r\n};\r\n\r\nexport const getClientsByAgent = async (agentId: number): Promise<Client[]> => {\r\n  return getClients({ agentId });\r\n};\r\n\r\nexport const updateClientStatus = async (id: number, status: string): Promise<Client> => {\r\n  const response = await api.patch(`/api/clients/${id}/status`, { status });\r\n  return response.data;\r\n};\r\n\r\nexport const getClientStats = async (): Promise<any> => {\r\n  const response = await api.get('/api/clients/stats');\r\n  return response.data;\r\n};\r\n\r\nexport const searchClients = async (query: string): Promise<Client[]> => {\r\n  const response = await api.get(`/api/clients/search?q=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const exportClients = async (filters?: FilterOptions): Promise<Blob> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/clients/export?${params.toString()}`, {\r\n    responseType: 'blob'\r\n  });\r\n  \r\n  return response.data;\r\n};\r\n\r\nexport const importClients = async (file: File): Promise<any> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  \r\n  const response = await api.post('/api/clients/import', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n  \r\n  return response.data;\r\n}; \r\n\r\nexport const getAgencyClients = async (): Promise<Client[]> => {\r\n  const response = await api.get('/api/clients/agency');\r\n  return response.data;\r\n}; ","import React from 'react';\r\nimport { Card, Avatar, Typography, Space, Dropdown, Menu, Tag } from 'antd';\r\nimport { UserOutlined, EditOutlined, PhoneOutlined, MailOutlined, HomeOutlined } from '@ant-design/icons';\r\nimport { Client, ClientStatus } from '../types';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\ninterface ClientCardProps {\r\n  client: Client;\r\n}\r\n\r\nconst statusMap: Record<Client['status'], { text: string; color: string }> = {\r\n  new: { text: 'Новый', color: 'blue' },\r\n  negotiation: { text: 'Переговоры', color: 'orange' },\r\n  contract: { text: 'Контракт', color: 'purple' },\r\n  deposit: { text: 'Задаток', color: 'cyan' },\r\n  success: { text: 'Успех', color: 'green' },\r\n  refused: { text: 'Отказ', color: 'red' },\r\n};\r\n\r\nconst ClientCard: React.FC<ClientCardProps> = ({ client }) => {\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item key=\"1\">Сменить статус</Menu.Item>\r\n    </Menu>\r\n  );\r\n  \r\n  const clientStatus = statusMap[client.status];\r\n\r\n  // --- Кнопки для связи через мессенджеры ---\r\n  const renderMessengers = () => {\r\n    const { telegramUsername, whatsappNumber } = client;\r\n    return (\r\n      <>\r\n        {telegramUsername && (\r\n          <a href={`https://t.me/${telegramUsername.replace(/^@/, '')}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src=\"/telegram-icon.svg\" alt=\"Telegram\" style={{ width: 22, height: 22, marginLeft: 6 }} loading=\"lazy\" />\r\n          </a>\r\n        )}\r\n        {whatsappNumber && (\r\n          <a href={`https://wa.me/${whatsappNumber.replace(/\\D/g, '')}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src=\"/whatsapp-icon.svg\" alt=\"WhatsApp\" style={{ width: 22, height: 22, marginLeft: 6 }} loading=\"lazy\" />\r\n          </a>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      hoverable\r\n      style={{ borderRadius: '16px' }}\r\n      actions={[\r\n        <EditOutlined key=\"edit\" />,\r\n      ]}\r\n    >\r\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n        <Space>\r\n          <Avatar size={48} icon={<UserOutlined />} />\r\n          <div data-testid={`client-card-${client.id}`}>\r\n            <Title level={5} style={{ margin: 0 }}>{client.name}</Title>\r\n            <Dropdown overlay={menu} trigger={['click']}>\r\n              <Tag color={clientStatus.color} style={{ cursor: 'pointer', marginTop: '4px' }}>\r\n                {clientStatus.text} ▾\r\n              </Tag>\r\n            </Dropdown>\r\n          </div>\r\n        </Space>\r\n\r\n        <Space direction=\"vertical\" style={{ marginTop: 16 }}>\r\n          <Space>\r\n            <PhoneOutlined />\r\n            <Text>{client.phone}</Text>\r\n            {renderMessengers()}\r\n          </Space>\r\n          <Space>\r\n            <MailOutlined />\r\n            <Text>{client.email}</Text>\r\n          </Space>\r\n          <Space>\r\n            <HomeOutlined />\r\n            <Text underline style={{ color: '#1890ff', cursor: 'pointer' }}>3-комнатная квартира, 78 м²</Text> \r\n          </Space>\r\n        </Space>\r\n      </Space>\r\n    </Card>\r\n  );\r\n};\r\n\r\nfunction areEqual(prevProps: ClientCardProps, nextProps: ClientCardProps) {\r\n  return (\r\n    prevProps.client.id === nextProps.client.id &&\r\n    prevProps.client.updatedAt === nextProps.client.updatedAt\r\n  );\r\n}\r\n\r\nexport default React.memo(ClientCard, areEqual); "],"names":["Title","Text","_Typography","Search","_Input","ClientsPage","_authContext$user2","clients","setClients","useState","loading","setLoading","error","setError","isModalVisible","setIsModalVisible","filter","setFilter","searchTerm","setSearchTerm","authContext","useContext","AuthContext","useEffect","async","_authContext$user","data","user","role","getAgencyClients","getClients","err","console","loadClients","token","activeStatuses","filteredClients","client","includes","status","name","toLowerCase","_jsxs","_Space","direction","style","width","size","children","_Row","justify","align","_jsx","_Col","level","margin","_Button","type","icon","PlusOutlined","onClick","placeholder","value","onChange","e","target","allowClear","autoFocus","_Segmented","options","block","_Spin","_Alert","message","showIcon","_Fragment","gutter","className","length","map","xs","sm","md","ClientCard","id","span","_Empty","description","marginTop","params","URLSearchParams","filters","Object","entries","forEach","_ref","key","undefined","append","toString","response","api","get","Array","isArray","getClientsByAgent","agentId","statusMap","new","text","color","negotiation","contract","deposit","success","refused","menu","_Menu","Item","clientStatus","_Card","hoverable","borderRadius","actions","EditOutlined","_Avatar","UserOutlined","_Dropdown","overlay","trigger","_Tag","cursor","PhoneOutlined","phone","renderMessengers","telegramUsername","whatsappNumber","href","replace","rel","src","alt","height","marginLeft","MailOutlined","email","HomeOutlined","underline","areEqual","prevProps","nextProps","updatedAt","React"],"sourceRoot":""}