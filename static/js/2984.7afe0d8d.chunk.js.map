{"version":3,"file":"static/js/2984.7afe0d8d.chunk.js","mappings":"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","sources":["services/property.service.ts","pages/ProfilePage.tsx","utils/deviceFingerprint.ts","services/auth.service.ts","services/client.service.ts"],"sourcesContent":["import api from './api';\r\nimport { Property, PaginatedResponse, FilterOptions } from '../types';\r\n\r\nexport const getAllProperties = async (filters?: FilterOptions): Promise<Property[]> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/properties?${params.toString()}`);\r\n  // Унифицируем: если data - массив, возвращаем его, если объект с .properties - возвращаем его\r\n  if (Array.isArray(response.data)) return response.data;\r\n  if (response.data && Array.isArray(response.data.properties)) return response.data.properties;\r\n  return [];\r\n};\r\n\r\nexport const getPropertyById = async (id: string | number): Promise<Property> => {\r\n  const response = await api.get(`/api/properties/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const createProperty = async (propertyData: Partial<Property>): Promise<Property> => {\r\n  const response = await api.post('/api/properties', propertyData);\r\n  return response.data;\r\n};\r\n\r\nexport const updateProperty = async (id: number, propertyData: Partial<Property>): Promise<Property> => {\r\n  const response = await api.patch(`/api/properties/${id}`, propertyData);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteProperty = async (id: number): Promise<void> => {\r\n  await api.delete(`/api/properties/${id}`);\r\n};\r\n\r\nexport const getMyProperties = async (): Promise<Property[]> => {\r\n  const response = await api.get('/api/properties/my');\r\n  return response.data;\r\n};\r\n\r\nexport const getPropertiesByAgent = async (agentId: number): Promise<Property[]> => {\r\n  return getAllProperties({ agentId });\r\n};\r\n\r\nexport const getPropertiesByAgency = async (agencyId: number): Promise<Property[]> => {\r\n  const response = await api.get(`/api/properties/agency/${agencyId}`);\r\n  return response.data;\r\n};\r\n\r\nexport const uploadPropertyPhotos = async (propertyId: number, files: File[]): Promise<string[]> => {\r\n  const formData = new FormData();\r\n  files.forEach((file, index) => {\r\n    formData.append('photos', file);\r\n  });\r\n  \r\n  const response = await api.post(`/api/properties/${propertyId}/photos`, formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n  \r\n  return response.data.urls;\r\n};\r\n\r\nexport const deletePropertyPhoto = async (propertyId: number, photoUrl: string): Promise<void> => {\r\n  await api.delete(`/api/properties/${propertyId}/photos`, {\r\n    data: { photoUrl }\r\n  });\r\n};\r\n\r\nexport const getPropertyStats = async (): Promise<any> => {\r\n  const response = await api.get('/api/properties/stats');\r\n  return response.data;\r\n};\r\n\r\nexport const searchProperties = async (query: string): Promise<Property[]> => {\r\n  const response = await api.get(`/api/properties/search?q=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getSimilarProperties = async (propertyId: number): Promise<Property[]> => {\r\n  const response = await api.get(`/api/properties/${propertyId}/similar`);\r\n  return response.data;\r\n};\r\n\r\nexport const togglePropertyFavorite = async (propertyId: number): Promise<void> => {\r\n  await api.post(`/api/properties/${propertyId}/favorite`);\r\n};\r\n\r\nexport const getFavoriteProperties = async (): Promise<Property[]> => {\r\n  const response = await api.get('/api/properties/favorites');\r\n  return response.data;\r\n};\r\n\r\nexport const exportProperties = async (filters?: FilterOptions): Promise<Blob> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/properties/export?${params.toString()}`, {\r\n    responseType: 'blob'\r\n  });\r\n  \r\n  return response.data;\r\n}; \r\n\r\nexport const getRecentProperties = async (): Promise<Property[]> => {\r\n  const response = await api.get('/api/properties?sort=createdAt_desc&limit=10');\r\n  // Унифицируем: если data - массив, возвращаем его, если объект с .properties - возвращаем его\r\n  if (Array.isArray(response.data)) return response.data;\r\n  if (response.data && Array.isArray(response.data.properties)) return response.data.properties;\r\n  return [];\r\n};\r\n\r\nexport const updatePropertyStatus = async (id: number, status: string, token?: string): Promise<Property> => {\r\n  const response = await api.patch(`/api/properties/${id}/status`, { status }, token ? { headers: { Authorization: `Bearer ${token}` } } : undefined);\r\n  return response.data;\r\n}; ","import React, { useContext, useEffect, useState, useRef } from 'react';\nimport { \n  Card, \n  Avatar, \n  Typography, \n  Button, \n  Tag, \n  Modal, \n  Form, \n  Input, \n  message,\n  AutoComplete,\n  Tabs,\n  Statistic,\n  Row,\n  Col,\n  Spin,\n  Upload\n} from 'antd';\nimport { \n  UserOutlined, \n  EditOutlined, \n  LockOutlined,\n  MailOutlined,\n  PhoneOutlined,\n  EnvironmentOutlined,\n  TeamOutlined,\n  CheckCircleOutlined,\n  SafetyCertificateOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  UploadOutlined,\n  CameraOutlined\n} from '@ant-design/icons';\nimport { AuthContext } from '../context/AuthContext';\nimport { updateProfile, getProfile } from '../services/auth.service';\nimport { getPropertiesByAgent } from '../services/property.service';\nimport { getClientsByAgent } from '../services/client.service';\nimport cities from '../data/cities.json';\nimport { getCityByIP } from '../utils/geocode';\nimport { uploadAvatar } from '../services/upload.service';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nexport default function ProfilePage() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editValues, setEditValues] = useState({ firstName: '', lastName: '', middleName: '', email: '', phone: '', city: '', region: '', whatsappNumber: '', telegramUsername: '', photo: '' });\n  const authContext = useContext(AuthContext);\n  const user = authContext?.user;\n  const [avatarHover, setAvatarHover] = useState(false);\n  const [passwordModalOpen, setPasswordModalOpen] = useState(false);\n  const [passwordForm] = Form.useForm();\n  const [changingPassword, setChangingPassword] = useState(false);\n  const [cityModalOpen, setCityModalOpen] = useState(false);\n  const [detectedCity, setDetectedCity] = useState<string | null>(null);\n  const [cityInput, setCityInput] = useState('');\n  const [cityOptions, setCityOptions] = useState<{ value: string }[]>([]);\n  const [activeTab, setActiveTab] = useState('general');\n  const [properties, setProperties] = useState<any[]>([]);\n  const [clients, setClients] = useState<any[]>([]);\n  const [statsLoading, setStatsLoading] = useState(false);\n  const [stats, setStats] = useState<any>(null);\n  const [statsError, setStatsError] = useState<string | null>(null);\n  // useRef должен быть на верхнем уровне компонента, до любых условий\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (user) {\n      setEditValues({\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        middleName: user.middleName || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        city: user.city || '',\n        region: user.region || '',\n        whatsappNumber: user.whatsappNumber || '',\n        telegramUsername: user.telegramUsername || '',\n        photo: user.photo || '',\n      });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (user && !user.city) {\n      (async () => {\n        const city = await getCityByIP();\n        if (city) {\n          setDetectedCity(city);\n          setCityInput(city);\n        }\n        setCityModalOpen(true);\n      })();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (!cityInput) {\n      setCityOptions([]);\n      return;\n    }\n    const filtered = (cities as any[])\n      .filter(c => c.name && c.name.toLowerCase().includes(cityInput.toLowerCase()))\n      .slice(0, 20)\n      .map(c => ({ value: c.name }));\n    setCityOptions(filtered);\n  }, [cityInput]);\n\n  useEffect(() => {\n    if (user && activeTab === 'stats') {\n      setStatsLoading(true);\n      setStatsError(null);\n      // Надежный способ: сначала пробуем stats-эндпоинт, если не работает — fallback на старые методы\n      fetch(`/api/properties/agent/${user.id}/stats`)\n        .then(async (res) => {\n          if (!res.ok) throw new Error('stats endpoint failed');\n          return res.json();\n        })\n        .then(setStats)\n        .catch(async () => {\n          // fallback: старый способ\n          try {\n            const [props, clis] = await Promise.all([\n              getPropertiesByAgent(user.id),\n              getClientsByAgent(user.id)\n            ]);\n            setStats({\n              total: props.length,\n              forSale: props.filter((p: any) => p.status === 'for_sale').length,\n              sold: props.filter((p: any) => p.status === 'sold').length,\n              exclusive: props.filter((p: any) => p.isExclusive).length,\n              clients: clis.length\n            });\n          } catch (e) {\n            setStatsError('Не удалось загрузить статистику');\n          }\n        })\n        .finally(() => setStatsLoading(false));\n    }\n  }, [user, activeTab]);\n\n  const handleCityConfirm = async (city: string) => {\n    const cityObj = (cities as any[]).find(c => c.name === city);\n    const region = cityObj && cityObj.region && cityObj.region.name ? cityObj.region.name : '';\n    try {\n      await updateProfile({ city, region });\n      if (authContext?.token) {\n        const freshProfile = await getProfile(authContext.token);\n        authContext.setAuthData(authContext.token, freshProfile);\n        localStorage.setItem('user', JSON.stringify(freshProfile));\n      }\n      setCityModalOpen(false);\n      message.success('Город и область успешно сохранены!');\n    } catch {\n      message.error('Ошибка при сохранении города');\n    }\n  };\n\n  if (authContext && authContext.user === undefined) {\n    return <div style={{ padding: 32 }}>Загрузка...</div>;\n  }\n  if (!user) {\n    return <div style={{ padding: 32 }}>Ошибка загрузки профиля. Попробуйте перезайти.</div>;\n  }\n\n  const handleEdit = () => setIsEditing(true);\n  const handleCancel = () => {\n    setIsEditing(false);\n    if (user) {\n      setEditValues({\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        middleName: user.middleName || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        city: user.city || '',\n        region: user.region || '',\n        whatsappNumber: user.whatsappNumber || '',\n        telegramUsername: user.telegramUsername || '',\n        photo: user.photo || '',\n      });\n    }\n  };\n  const handleSave = async () => {\n    try {\n      await updateProfile(editValues);\n      if (authContext?.token) {\n        const freshProfile = await getProfile(authContext.token);\n        authContext.setAuthData(authContext.token, freshProfile);\n        localStorage.setItem('user', JSON.stringify(freshProfile));\n      }\n      message.success('Профиль обновлён!');\n      setIsEditing(false);\n    } catch {\n      message.error('Ошибка при обновлении профиля');\n    }\n  };\n  const handlePasswordChange = async () => {\n    try {\n      setChangingPassword(true);\n      const values = await passwordForm.validateFields();\n      const response = await fetch('/api/auth/change-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${authContext?.token}` },\n        body: JSON.stringify({ oldPassword: values.oldPassword, newPassword: values.newPassword }),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка при смене пароля');\n      }\n      message.success('Пароль успешно изменён');\n      setPasswordModalOpen(false);\n      passwordForm.resetFields();\n    } catch (e: any) {\n      message.error(e.message || 'Ошибка при смене пароля');\n    } finally {\n      setChangingPassword(false);\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'agent': return 'Агент';\n      case 'director': return 'Директор';\n      case 'manager': return 'Менеджер';\n      case 'private_realtor': return 'Частный риэлтор';\n      case 'support': return 'Служба поддержки';\n      default: return role;\n    }\n  };\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'active': return 'Активен';\n      case 'pending': return 'Ожидает';\n      case 'banned': return 'Заблокирован';\n      default: return status;\n    }\n  };\n  const getDocumentStatusLabel = (status: string) => {\n    switch (status) {\n      case 'approved': return 'Проверено';\n      case 'pending_review': return 'На проверке';\n      case 'rejected': return 'Отклонено';\n      case 'needs_revision': return 'Требует доработки';\n      default: return status;\n    }\n  };\n  const documentStatus = user.documentStatus || 'pending_review';\n  const documentStatusColor =\n    documentStatus === 'approved' ? 'green' :\n    documentStatus === 'pending_review' ? 'orange' :\n    documentStatus === 'rejected' ? 'red' : 'default';\n  let avatarSrc = user?.photo || user?.avatar || undefined;\n  // Не подставлять /avatars/ вручную, просто используем user.photo\n\n  const handleAvatarClick = () => {\n    if (isEditing && fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  // Исправленный handleAvatarChange\n  const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    try {\n      const formData = new FormData();\n      formData.append('photo', file);\n      // Добавим остальные поля профиля, чтобы не терять их при обновлении\n      Object.entries(editValues).forEach(([key, value]) => {\n        if (key !== 'photo') formData.append(key, value as string);\n      });\n      console.log('Отправка PATCH /users/profile с FormData:', Array.from(formData.entries()));\n      const response = await fetch('/api/users/profile', {\n        method: 'PATCH',\n        body: formData,\n        credentials: 'include',\n        headers: authContext?.token ? { Authorization: `Bearer ${authContext.token}` } : undefined,\n      });\n      if (!response.ok) throw new Error('Ошибка при обновлении профиля');\n      const updatedUser = await response.json();\n      setEditValues(v => ({ ...v, photo: updatedUser.photo }));\n      if (authContext?.setAuthData && authContext.token) {\n        authContext.setAuthData(authContext.token, updatedUser);\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n      }\n      message.success('Фото успешно обновлено!');\n      console.log('Фото профиля обновлено:', updatedUser.photo);\n    } catch (err) {\n      message.error('Ошибка при загрузке фото');\n      console.error('Ошибка при загрузке фото:', err);\n    }\n  };\n\n  return (\n    <div style={{ width: '100%', minHeight: '100vh', display: 'flex', flexDirection: 'column', alignItems: 'center', background: '#f6faff', padding: '32px 0' }}>\n      <Card style={{ width: '100%', maxWidth: 520, borderRadius: 24, boxShadow: '0 4px 24px #e6eaf1', background: '#fff', padding: 0 }} bodyStyle={{ padding: 32 }}>\n        <Tabs activeKey={activeTab} onChange={setActiveTab} centered size=\"large\">\n          <TabPane tab=\"Общие данные\" key=\"general\">\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              {/* Аватар профиля */}\n              <div style={{ position: 'relative', cursor: isEditing ? 'pointer' : 'default', width: 120, height: 120, margin: '0 auto' }} onClick={handleAvatarClick}>\n                <img\n                  src={isEditing ? editValues.photo || user.photo : user.photo}\n                  alt=\"avatar\"\n                  style={{ width: 120, height: 120, borderRadius: '50%', objectFit: 'cover', border: '2px solid #eee' }}\n                />\n                {isEditing && (\n                  <span style={{ position: 'absolute', bottom: 8, right: 8, background: '#fff', borderRadius: '50%', padding: 4, boxShadow: '0 0 4px #ccc' }}>\n                    <EditOutlined />\n          </span>\n                )}\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  ref={fileInputRef}\n                  style={{ display: 'none' }}\n                  onChange={handleAvatarChange}\n                />\n                    </div>\n              <Title level={3} style={{ margin: 0, color: '#2d3652', fontWeight: 700, fontSize: 26, textAlign: 'center' }}>\n                {user.lastName} {user.firstName} {user.middleName}\n                  </Title>\n              <div style={{ marginTop: 8, marginBottom: 8 }}>\n                    <Tag color=\"blue\" icon={<TeamOutlined />}>{getRoleLabel(user.role)}</Tag>\n                    <Tag color=\"green\" icon={<CheckCircleOutlined />}>{getStatusLabel(user.status || 'active')}</Tag>\n                <Tag color={documentStatusColor} icon={<SafetyCertificateOutlined />}>{getDocumentStatusLabel(documentStatus)}</Tag>\n                    {user.agency && (\n                  <Tag color=\"purple\" icon={<UserOutlined />}>{user.agency.name}</Tag>\n                )}\n                      </div>\n              {isEditing ? (\n                <Form layout=\"vertical\" style={{ width: '100%', maxWidth: 600, margin: '0 auto' }}>\n                  {/* Удаляю Form.Item с Upload-кнопкой, теперь загрузка только через клик по аватару */}\n                  <Row gutter={16}>\n                    <Col xs={24} sm={12}>\n                      <Form.Item label=\"Фамилия\" required>\n                        <Input value={editValues.lastName} onChange={e => setEditValues(v => ({ ...v, lastName: e.target.value }))} />\n                      </Form.Item>\n                      <Form.Item label=\"Имя\" required>\n                        <Input value={editValues.firstName} onChange={e => setEditValues(v => ({ ...v, firstName: e.target.value }))} />\n                      </Form.Item>\n                      <Form.Item label=\"Отчество\">\n                        <Input value={editValues.middleName} onChange={e => setEditValues(v => ({ ...v, middleName: e.target.value }))} />\n                      </Form.Item>\n                      <Form.Item label=\"Email\" required>\n                        <Input value={editValues.email} onChange={e => setEditValues(v => ({ ...v, email: e.target.value }))} />\n                      </Form.Item>\n                    </Col>\n                    <Col xs={24} sm={12}>\n                      <Form.Item label=\"Телефон\">\n                        <Input value={editValues.phone} onChange={e => setEditValues(v => ({ ...v, phone: e.target.value }))} />\n                      </Form.Item>\n                      <Form.Item label=\"Город\">\n                        <Input value={editValues.city} onChange={e => setEditValues(v => ({ ...v, city: e.target.value }))} />\n                      </Form.Item>\n                      <Form.Item label=\"Регион\">\n                        <Input value={editValues.region} onChange={e => setEditValues(v => ({ ...v, region: e.target.value }))} />\n                      </Form.Item>\n                      <Form.Item label=\"WhatsApp номер\">\n                        <Input value={editValues.whatsappNumber || ''} onChange={e => setEditValues(v => ({ ...v, whatsappNumber: e.target.value }))} />\n                      </Form.Item>\n                      <Form.Item label=\"Telegram username\">\n                        <Input value={editValues.telegramUsername || ''} onChange={e => setEditValues(v => ({ ...v, telegramUsername: e.target.value }))} />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <div style={{ display: 'flex', gap: 12, justifyContent: 'center', marginTop: 16 }}>\n                    <Button type=\"primary\" onClick={handleSave}>Сохранить</Button>\n                    <Button onClick={handleCancel}>Отмена</Button>\n                  </div>\n                </Form>\n              ) : (\n                <>\n                  <div style={{ width: '100%', margin: '18px 0' }}>\n                    <div style={{ color: '#888', marginBottom: 6 }}><MailOutlined style={{ marginRight: 8 }} />{user.email}</div>\n                    <div style={{ color: '#888', marginBottom: 6 }}><PhoneOutlined style={{ marginRight: 8 }} />{user.phone || '—'}</div>\n                    <div style={{ color: '#888', marginBottom: 6 }}><EnvironmentOutlined style={{ marginRight: 8 }} />{user.city || '—'}, {user.region || '—'}</div>\n                    <div style={{ color: '#888', marginBottom: 6, display: 'flex', alignItems: 'center' }}>\n                      <img src=\"/telegram-icon.svg\" alt=\"Telegram\" style={{ width: 22, height: 22, marginRight: 8 }} />\n                      {user.telegramUsername ? (\n                        <a href={`https://t.me/${user.telegramUsername.replace(/^@/, '')}`} target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#2563eb', fontWeight: 500 }}>\n                          @{user.telegramUsername.replace(/^@/, '')}\n                        </a>\n                      ) : '—'}\n                    </div>\n                    <div style={{ color: '#888', marginBottom: 6, display: 'flex', alignItems: 'center' }}>\n                      <img src=\"/whatsapp-icon.svg\" alt=\"WhatsApp\" style={{ width: 22, height: 22, marginRight: 8 }} />\n                      {user.whatsappNumber ? (\n                        <a href={`https://wa.me/${user.whatsappNumber.replace(/\\D/g, '')}`} target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#25d366', fontWeight: 500 }}>\n                          {user.whatsappNumber}\n                        </a>\n                      ) : '—'}\n                    </div>\n                    <div style={{ color: '#888', marginBottom: 6 }}><span style={{ marginRight: 8, color: '#aaa' }}>Зарегистрирован:</span>{user.createdAt ? new Date(user.createdAt).toLocaleDateString('ru-RU') : '—'}</div>\n                    <div style={{ color: '#888', marginBottom: 6 }}><span style={{ marginRight: 8, color: '#aaa' }}>Последний вход:</span>{user.lastLoginAt ? new Date(user.lastLoginAt).toLocaleString('ru-RU') : '—'}</div>\n    </div>\n                  <div style={{ display: 'flex', gap: 16, justifyContent: 'center', marginTop: 8, marginBottom: 8 }}>\n                    <Button type=\"default\" icon={<LockOutlined />} style={{ minWidth: 140, height: 40, fontSize: 15, borderRadius: 10, fontWeight: 500 }} onClick={() => setPasswordModalOpen(true)}>\n                      Сменить пароль\n                    </Button>\n                    <Button type=\"primary\" icon={<EditOutlined />} style={{ minWidth: 140, height: 44, fontSize: 16, borderRadius: 14, fontWeight: 600, boxShadow: '0 2px 12px #b3c6e0' }} onClick={handleEdit}>\n                      Редактировать\n                    </Button>\n                  </div>\n                </>\n                  )}\n                </div>\n          </TabPane>\n          <TabPane tab=\"Статистика\" key=\"stats\">\n            {activeTab === 'stats' && (\n              <div style={{ minHeight: 200, width: '100%' }}>\n                {statsLoading ? <Spin /> : statsError ? (\n                  <div style={{ color: 'red', textAlign: 'center', margin: 24 }}>{statsError}</div>\n                ) : stats ? (\n                  <Row gutter={16} style={{ marginTop: 16 }}>\n                    <Col span={8}><Statistic title=\"Всего объектов\" value={stats.total} /></Col>\n                    <Col span={8}><Statistic title=\"На продаже\" value={stats.forSale} /></Col>\n                    <Col span={8}><Statistic title=\"Продано\" value={stats.sold} /></Col>\n                    <Col span={8}><Statistic title=\"Эксклюзивы\" value={stats.exclusive} /></Col>\n                    <Col span={8}><Statistic title=\"Клиенты\" value={stats.clients} /></Col>\n                  </Row>\n                ) : null}\n              </div>\n            )}\n          </TabPane>\n        </Tabs>\n            </Card>\n\n                {/* Модальное окно смены пароля */}\n                <Modal\n                  open={passwordModalOpen}\n                  title=\"Смена пароля\"\n                  onCancel={() => setPasswordModalOpen(false)}\n        onOk={async () => { await handlePasswordChange(); }}\n                  okText=\"Сменить пароль\"\n                  confirmLoading={changingPassword}\n                  cancelText=\"Отмена\"\n                >\n                  <Form form={passwordForm} layout=\"vertical\">\n          <Form.Item name=\"oldPassword\" label=\"Старый пароль\" rules={[{ required: true, message: 'Введите старый пароль' }]}>  <Input.Password prefix={<LockOutlined />} placeholder=\"Введите текущий пароль\" iconRender={visible => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)} />\n            </Form.Item>\n          <Form.Item name=\"newPassword\" label=\"Новый пароль\" rules={[{ required: true, message: 'Введите новый пароль' }, { min: 8, message: 'Пароль должен содержать минимум 8 символов' }]}>  <Input.Password prefix={<LockOutlined />} placeholder=\"Введите новый пароль\" iconRender={visible => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)} />\n            </Form.Item>\n          <Form.Item name=\"confirmPassword\" label=\"Повторите новый пароль\" dependencies={[\"newPassword\"]} rules={[{ required: true, message: 'Повторите новый пароль' }, ({ getFieldValue }) => ({ validator(_, value) { if (!value || getFieldValue('newPassword') === value) { return Promise.resolve(); } return Promise.reject(new Error('Пароли не совпадают')); }, })]}>  <Input.Password prefix={<LockOutlined />} placeholder=\"Повторите новый пароль\" iconRender={visible => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)} />\n                    </Form.Item>\n                  </Form>\n                </Modal>\n\n      {/* Модальное окно выбора города */}\n      <Modal\n        open={cityModalOpen}\n        title=\"Укажите ваш город\"\n        closable={false}\n        footer={null}\n        maskClosable={false}\n      >\n        {detectedCity ? (\n          <div style={{ marginBottom: 16 }}>\n            Ваш город определён как <b>{detectedCity}</b>.<br />\n            <Button type=\"primary\" style={{ marginTop: 12, marginRight: 8 }} onClick={() => handleCityConfirm(detectedCity!)}>Да, это мой город</Button>\n            <Button style={{ marginTop: 12 }} onClick={() => setDetectedCity(null)}>Нет, выбрать другой</Button>\n          </div>\n        ) : null}\n        {!detectedCity && (\n          <div>\n            <div style={{ marginBottom: 8 }}>Выберите город из списка:</div>\n            <AutoComplete\n              options={cityOptions}\n              value={cityInput}\n              onChange={setCityInput}\n              onSelect={val => setCityInput(val)}\n              placeholder=\"Начните вводить название города\"\n              style={{ width: '100%', marginBottom: 12 }}\n              filterOption={false}\n            />\n            <Button type=\"primary\" block disabled={!cityInput} onClick={() => handleCityConfirm(cityInput)}>\n              Сохранить город\n            </Button>\n              </div>\n        )}\n      </Modal>\n    </div>\n  );\n} ","import * as crypto from 'crypto';\r\n\r\nexport interface DeviceInfo {\r\n  deviceId: string;\r\n  deviceFingerprint: string;\r\n  userAgent: string;\r\n  screenResolution: string;\r\n  timezone: string;\r\n  language: string;\r\n  ipAddress?: string;\r\n  location?: string;\r\n  deviceType?: string;\r\n  browser?: string;\r\n  browserVersion?: string;\r\n}\r\n\r\n/**\r\n * Генерация уникального ID устройства\r\n */\r\nexport function generateDeviceId(): string {\r\n  const userAgent = navigator.userAgent;\r\n  const platform = navigator.platform;\r\n  const language = navigator.language;\r\n  const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n  \r\n  // Используем более стабильные характеристики устройства\r\n  const data = `${platform}-${language}-${timezone}-${Date.now()}`;\r\n  \r\n  // Простой хеш\r\n  let hash = 0;\r\n  for (let i = 0; i < data.length; i++) {\r\n    const char = data.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + char;\r\n    hash = hash & hash; // Convert to 32bit integer\r\n  }\r\n  return Math.abs(hash).toString(36);\r\n}\r\n\r\n/**\r\n * Генерация fingerprint устройства с учетом браузера\r\n */\r\nexport function generateDeviceFingerprint(): string {\r\n  const userAgent = navigator.userAgent;\r\n  const platform = navigator.platform;\r\n  const language = navigator.language;\r\n  const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n  \r\n  // Определяем тип браузера\r\n  const browserInfo = getBrowserInfo();\r\n  \r\n  const data = `${platform}-${language}-${timezone}-${browserInfo.browser}-${browserInfo.version}`;\r\n  \r\n  let hash = 0;\r\n  for (let i = 0; i < data.length; i++) {\r\n    const char = data.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + char;\r\n    hash = hash & hash;\r\n  }\r\n  return Math.abs(hash).toString(36);\r\n}\r\n\r\n/**\r\n * Определение информации о браузере\r\n */\r\nfunction getBrowserInfo(): { browser: string; version: string } {\r\n  const userAgent = navigator.userAgent;\r\n  \r\n  if (userAgent.includes('Chrome')) {\r\n    return { browser: 'Chrome', version: getVersion(userAgent, 'Chrome') };\r\n  } else if (userAgent.includes('Firefox')) {\r\n    return { browser: 'Firefox', version: getVersion(userAgent, 'Firefox') };\r\n  } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {\r\n    return { browser: 'Safari', version: getVersion(userAgent, 'Safari') };\r\n  } else if (userAgent.includes('Edge')) {\r\n    return { browser: 'Edge', version: getVersion(userAgent, 'Edge') };\r\n  } else if (userAgent.includes('Opera')) {\r\n    return { browser: 'Opera', version: getVersion(userAgent, 'Opera') };\r\n  } else {\r\n    return { browser: 'Unknown', version: 'Unknown' };\r\n  }\r\n}\r\n\r\n/**\r\n * Извлечение версии браузера\r\n */\r\nfunction getVersion(userAgent: string, browserName: string): string {\r\n  const match = userAgent.match(new RegExp(`${browserName}/([\\\\d.]+)`));\r\n  return match ? match[1] : 'Unknown';\r\n}\r\n\r\n/**\r\n * Определение типа устройства\r\n */\r\nfunction getDeviceType(): string {\r\n  const userAgent = navigator.userAgent;\r\n  \r\n  if (/Mobile|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {\r\n    return 'mobile';\r\n  } else if (/Tablet|iPad/i.test(userAgent)) {\r\n    return 'tablet';\r\n  } else {\r\n    return 'desktop';\r\n  }\r\n}\r\n\r\n/**\r\n * Получение информации об устройстве\r\n */\r\nexport function getDeviceInfo(): DeviceInfo {\r\n  const userAgent = navigator.userAgent;\r\n  const platform = navigator.platform;\r\n  const language = navigator.language;\r\n  const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n  const deviceType = getDeviceType();\r\n  const browserInfo = getBrowserInfo();\r\n  \r\n  return {\r\n    deviceId: generateDeviceId(),\r\n    deviceFingerprint: generateDeviceFingerprint(),\r\n    userAgent,\r\n    screenResolution: 'unknown',\r\n    timezone,\r\n    language,\r\n    deviceType,\r\n    browser: browserInfo.browser,\r\n    browserVersion: browserInfo.version,\r\n  };\r\n}\r\n\r\n/**\r\n * Получение IP адреса (через внешний сервис)\r\n */\r\nexport async function getIpAddress(): Promise<string> {\r\n  try {\r\n    const response = await fetch('https://api.ipify.org?format=json');\r\n    const data = await response.json();\r\n    return data.ip;\r\n  } catch (error) {\r\n    console.warn('Не удалось получить IP адрес:', error);\r\n    return 'unknown';\r\n  }\r\n}\r\n\r\n/**\r\n * Получение геолокации (город/страна)\r\n */\r\nexport async function getLocation(): Promise<string> {\r\n  try {\r\n    const response = await fetch('https://ipapi.co/json/');\r\n    const data = await response.json();\r\n    return `${data.city}, ${data.country_name}`;\r\n  } catch (error) {\r\n    console.warn('Не удалось получить геолокацию:', error);\r\n    return 'unknown';\r\n  }\r\n}\r\n\r\n/**\r\n * Получение полной информации об устройстве\r\n */\r\nexport async function getFullDeviceInfo(): Promise<DeviceInfo> {\r\n  const baseInfo = getDeviceInfo();\r\n  const [ipAddress, location] = await Promise.all([\r\n    getIpAddress(),\r\n    getLocation(),\r\n  ]);\r\n  \r\n  return {\r\n    ...baseInfo,\r\n    ipAddress,\r\n    location,\r\n  };\r\n} ","import api from './api';\r\nimport { LoginCredentials, User } from '../types';\r\nimport { getFullDeviceInfo, DeviceInfo } from '../utils/deviceFingerprint';\r\n\r\n// Временные типы для восстановления пароля\r\ninterface ForgotPasswordRequest {\r\n  email: string;\r\n}\r\n\r\ninterface ResetPasswordRequest {\r\n  token: string;\r\n  newPassword: string;\r\n}\r\n\r\ninterface ForgotPasswordResponse {\r\n  message: string;\r\n}\r\n\r\ninterface ResetPasswordResponse {\r\n  message: string;\r\n}\r\n\r\nexport const login = async (credentials: LoginCredentials, config?: any): Promise<{ access_token: string; user: User }> => {\r\n  try {\r\n    // Получаем информацию об устройстве\r\n    const deviceInfo = await getFullDeviceInfo();\r\n    \r\n    const response = await api.post('/api/auth/login', {\r\n      ...credentials,\r\n      deviceInfo,\r\n    }, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Если не удалось получить информацию об устройстве, отправляем без неё\r\n    const response = await api.post('/api/auth/login', credentials, config);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport const register = async (formData: FormData): Promise<any> => {\r\n  const response = await api.post('/api/auth/register', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const updateProfile = async (userData: Partial<User>): Promise<User> => {\r\n  const response = await api.patch('/api/users/profile', userData);\r\n  return response.data;\r\n};\r\n\r\nexport const updateUser = async (id: number, userData: Partial<User>): Promise<User> => {\r\n  const response = await api.patch(`/api/users/${id}`, userData);\r\n  return response.data;\r\n};\r\n\r\nexport const getProfile = async (token?: string): Promise<User> => {\r\n  const response = await api.get('/api/users/profile', {\r\n    headers: token ? { Authorization: `Bearer ${token}` } : undefined,\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Получить новый access_token по refresh_token (cookie)\r\nexport async function refreshToken(): Promise<string | null> {\r\n  try {\r\n    const res = await fetch('/api/auth/refresh', {\r\n      method: 'POST',\r\n      credentials: 'include', // чтобы отправлялись cookies\r\n    });\r\n    if (!res.ok) return null;\r\n    const data = await res.json();\r\n    return data.access_token || null;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n// Запрос на восстановление пароля\r\nexport const forgotPassword = async (email: string): Promise<ForgotPasswordResponse> => {\r\n  const response = await api.post<ForgotPasswordResponse>('/api/auth/forgot-password', { email });\r\n  return response.data;\r\n};\r\n\r\n// Сброс пароля по токену\r\nexport const resetPassword = async (token: string, newPassword: string): Promise<ResetPasswordResponse> => {\r\n  const response = await api.post<ResetPasswordResponse>('/api/auth/reset-password', { \r\n    token, \r\n    newPassword \r\n  });\r\n  return response.data;\r\n}; ","import api from './api';\r\nimport { Client, PaginatedResponse, FilterOptions } from '../types';\r\n\r\nexport const getClients = async (filters?: FilterOptions): Promise<Client[]> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/clients?${params.toString()}`);\r\n  // Унифицируем: если data - массив, возвращаем его, если объект с .clients - возвращаем его\r\n  if (Array.isArray(response.data)) return response.data;\r\n  if (response.data && Array.isArray(response.data.clients)) return response.data.clients;\r\n  return [];\r\n};\r\n\r\nexport const getClientById = async (id: number): Promise<Client> => {\r\n  const response = await api.get(`/api/clients/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const createClient = async (clientData: Partial<Client>): Promise<Client> => {\r\n  const response = await api.post('/api/clients', clientData);\r\n  return response.data;\r\n};\r\n\r\nexport const updateClient = async (id: number, clientData: Partial<Client>): Promise<Client> => {\r\n  const response = await api.patch(`/api/clients/${id}`, clientData);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteClient = async (id: number): Promise<void> => {\r\n  await api.delete(`/api/clients/${id}`);\r\n};\r\n\r\nexport const getMyClients = async (): Promise<Client[]> => {\r\n  const response = await api.get('/api/clients/my');\r\n  return response.data;\r\n};\r\n\r\nexport const getClientsByAgent = async (agentId: number): Promise<Client[]> => {\r\n  return getClients({ agentId });\r\n};\r\n\r\nexport const updateClientStatus = async (id: number, status: string): Promise<Client> => {\r\n  const response = await api.patch(`/api/clients/${id}/status`, { status });\r\n  return response.data;\r\n};\r\n\r\nexport const getClientStats = async (): Promise<any> => {\r\n  const response = await api.get('/api/clients/stats');\r\n  return response.data;\r\n};\r\n\r\nexport const searchClients = async (query: string): Promise<Client[]> => {\r\n  const response = await api.get(`/api/clients/search?q=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const exportClients = async (filters?: FilterOptions): Promise<Blob> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/clients/export?${params.toString()}`, {\r\n    responseType: 'blob'\r\n  });\r\n  \r\n  return response.data;\r\n};\r\n\r\nexport const importClients = async (file: File): Promise<any> => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  \r\n  const response = await api.post('/api/clients/import', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n  \r\n  return response.data;\r\n}; \r\n\r\nexport const getAgencyClients = async (): Promise<Client[]> => {\r\n  const response = await api.get('/api/clients/agency');\r\n  return response.data;\r\n}; "],"names":["getAllProperties","async","params","URLSearchParams","filters","Object","entries","forEach","_ref","key","value","undefined","append","toString","response","api","get","Array","isArray","data","properties","getPropertyById","id","getPropertiesByAgent","agentId","getRecentProperties","updatePropertyStatus","status","token","patch","headers","Authorization","Title","_Typography","TabPane","_Tabs","ProfilePage","isEditing","setIsEditing","useState","editValues","setEditValues","firstName","lastName","middleName","email","phone","city","region","whatsappNumber","telegramUsername","photo","authContext","useContext","AuthContext","user","avatarHover","setAvatarHover","passwordModalOpen","setPasswordModalOpen","passwordForm","_Form","useForm","changingPassword","setChangingPassword","cityModalOpen","setCityModalOpen","detectedCity","setDetectedCity","cityInput","setCityInput","cityOptions","setCityOptions","activeTab","setActiveTab","setProperties","clients","setClients","statsLoading","setStatsLoading","stats","setStats","statsError","setStatsError","fileInputRef","useRef","useEffect","getCityByIP","filtered","cities","filter","c","name","toLowerCase","includes","slice","map","fetch","then","res","ok","Error","json","catch","props","clis","Promise","all","getClientsByAgent","total","length","forSale","p","sold","exclusive","isExclusive","e","finally","handleCityConfirm","cityObj","find","updateProfile","freshProfile","getProfile","setAuthData","localStorage","setItem","JSON","stringify","_message","success","error","_jsx","style","padding","children","documentStatus","documentStatusColor","avatar","_jsxs","width","minHeight","display","flexDirection","alignItems","background","_Card","maxWidth","borderRadius","boxShadow","bodyStyle","activeKey","onChange","centered","size","tab","position","cursor","height","margin","onClick","handleAvatarClick","current","click","src","alt","objectFit","border","bottom","right","EditOutlined","type","accept","ref","_e$target$files","file","target","files","formData","FormData","console","log","from","method","body","credentials","updatedUser","v","err","level","color","fontWeight","fontSize","textAlign","marginTop","marginBottom","_Tag","icon","TeamOutlined","role","getRoleLabel","CheckCircleOutlined","getStatusLabel","SafetyCertificateOutlined","getDocumentStatusLabel","agency","UserOutlined","layout","_Row","gutter","_Col","xs","sm","Item","label","required","_Input","gap","justifyContent","_Button","handleCancel","_Fragment","MailOutlined","marginRight","PhoneOutlined","EnvironmentOutlined","href","replace","rel","createdAt","Date","toLocaleDateString","lastLoginAt","toLocaleString","LockOutlined","minWidth","handleEdit","_Spin","span","_Statistic","title","_Modal","open","onCancel","onOk","values","validateFields","oldPassword","newPassword","errorData","message","resetFields","handlePasswordChange","okText","confirmLoading","cancelText","form","rules","Password","prefix","placeholder","iconRender","visible","EyeOutlined","EyeInvisibleOutlined","min","dependencies","_ref2","getFieldValue","validator","_","reject","resolve","closable","footer","maskClosable","_AutoComplete","options","onSelect","val","filterOption","block","disabled","generateDeviceId","navigator","userAgent","platform","language","Intl","DateTimeFormat","resolvedOptions","timeZone","now","hash","i","charCodeAt","Math","abs","generateDeviceFingerprint","timezone","browserInfo","getBrowserInfo","browser","version","getVersion","browserName","match","RegExp","getDeviceInfo","deviceType","test","getDeviceType","deviceId","deviceFingerprint","screenResolution","browserVersion","getIpAddress","ip","warn","getLocation","country_name","login","config","deviceInfo","baseInfo","ipAddress","location","getFullDeviceInfo","post","register","userData","refreshToken","access_token","forgotPassword","resetPassword","getClients","getAgencyClients"],"sourceRoot":""}