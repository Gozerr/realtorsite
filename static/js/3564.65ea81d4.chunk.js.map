{"version":3,"file":"static/js/3564.65ea81d4.chunk.js","mappings":"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","sources":["services/property.service.ts","components/OptimizedImage.tsx","services/selection.service.ts","pages/SelectionPage.tsx","components/AddToSelectionModal.tsx"],"sourcesContent":["import api from './api';\r\nimport { Property, PaginatedResponse, FilterOptions } from '../types';\r\n\r\nexport const getAllProperties = async (filters?: FilterOptions): Promise<Property[]> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/properties?${params.toString()}`);\r\n  // Унифицируем: если data - массив, возвращаем его, если объект с .properties - возвращаем его\r\n  if (Array.isArray(response.data)) return response.data;\r\n  if (response.data && Array.isArray(response.data.properties)) return response.data.properties;\r\n  return [];\r\n};\r\n\r\nexport const getPropertyById = async (id: string | number): Promise<Property> => {\r\n  const response = await api.get(`/api/properties/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const createProperty = async (propertyData: Partial<Property>): Promise<Property> => {\r\n  const response = await api.post('/api/properties', propertyData);\r\n  return response.data;\r\n};\r\n\r\nexport const updateProperty = async (id: number, propertyData: Partial<Property>): Promise<Property> => {\r\n  const response = await api.patch(`/api/properties/${id}`, propertyData);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteProperty = async (id: number): Promise<void> => {\r\n  await api.delete(`/api/properties/${id}`);\r\n};\r\n\r\nexport const getMyProperties = async (): Promise<Property[]> => {\r\n  const response = await api.get('/api/properties/my');\r\n  return response.data;\r\n};\r\n\r\nexport const getPropertiesByAgent = async (agentId: number): Promise<Property[]> => {\r\n  return getAllProperties({ agentId });\r\n};\r\n\r\nexport const getPropertiesByAgency = async (agencyId: number): Promise<Property[]> => {\r\n  const response = await api.get(`/api/properties/agency/${agencyId}`);\r\n  return response.data;\r\n};\r\n\r\nexport const uploadPropertyPhotos = async (propertyId: number, files: File[]): Promise<string[]> => {\r\n  const formData = new FormData();\r\n  files.forEach((file, index) => {\r\n    formData.append('photos', file);\r\n  });\r\n  \r\n  const response = await api.post(`/api/properties/${propertyId}/photos`, formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n  \r\n  return response.data.urls;\r\n};\r\n\r\nexport const deletePropertyPhoto = async (propertyId: number, photoUrl: string): Promise<void> => {\r\n  await api.delete(`/api/properties/${propertyId}/photos`, {\r\n    data: { photoUrl }\r\n  });\r\n};\r\n\r\nexport const getPropertyStats = async (): Promise<any> => {\r\n  const response = await api.get('/api/properties/stats');\r\n  return response.data;\r\n};\r\n\r\nexport const searchProperties = async (query: string): Promise<Property[]> => {\r\n  const response = await api.get(`/api/properties/search?q=${encodeURIComponent(query)}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getSimilarProperties = async (propertyId: number): Promise<Property[]> => {\r\n  const response = await api.get(`/api/properties/${propertyId}/similar`);\r\n  return response.data;\r\n};\r\n\r\nexport const togglePropertyFavorite = async (propertyId: number): Promise<void> => {\r\n  await api.post(`/api/properties/${propertyId}/favorite`);\r\n};\r\n\r\nexport const getFavoriteProperties = async (): Promise<Property[]> => {\r\n  const response = await api.get('/api/properties/favorites');\r\n  return response.data;\r\n};\r\n\r\nexport const exportProperties = async (filters?: FilterOptions): Promise<Blob> => {\r\n  const params = new URLSearchParams();\r\n  if (filters) {\r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null && value !== '') {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n  }\r\n  \r\n  const response = await api.get(`/api/properties/export?${params.toString()}`, {\r\n    responseType: 'blob'\r\n  });\r\n  \r\n  return response.data;\r\n}; \r\n\r\nexport const getRecentProperties = async (): Promise<Property[]> => {\r\n  const response = await api.get('/api/properties?sort=createdAt_desc&limit=10');\r\n  // Унифицируем: если data - массив, возвращаем его, если объект с .properties - возвращаем его\r\n  if (Array.isArray(response.data)) return response.data;\r\n  if (response.data && Array.isArray(response.data.properties)) return response.data.properties;\r\n  return [];\r\n};\r\n\r\nexport const updatePropertyStatus = async (id: number, status: string, token?: string): Promise<Property> => {\r\n  const response = await api.patch(`/api/properties/${id}/status`, { status }, token ? { headers: { Authorization: `Bearer ${token}` } } : undefined);\r\n  return response.data;\r\n}; ","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Image, Skeleton } from 'antd';\r\nimport { PictureOutlined } from '@ant-design/icons';\r\n\r\ninterface OptimizedImageProps {\r\n  src: string;\r\n  alt: string;\r\n  width?: number | string;\r\n  height?: number | string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  fallback?: string;\r\n  placeholder?: React.ReactNode;\r\n  onLoad?: () => void;\r\n  onError?: () => void;\r\n  lazy?: boolean;\r\n  quality?: number;\r\n  preview?: boolean;\r\n}\r\n\r\nconst OptimizedImage: React.FC<OptimizedImageProps> = ({\r\n  src,\r\n  alt,\r\n  width,\r\n  height,\r\n  className,\r\n  style,\r\n  fallback = '/placeholder-image.jpg',\r\n  placeholder,\r\n  onLoad,\r\n  onError,\r\n  lazy = true,\r\n  quality = 80,\r\n  preview = false,\r\n}) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [imageSrc, setImageSrc] = useState(src);\r\n  const imgRef = useRef<HTMLImageElement>(null);\r\n\r\n  useEffect(() => {\r\n    setImageSrc(src);\r\n    setError(false);\r\n    setLoading(true);\r\n  }, [src]);\r\n\r\n  const handleLoad = () => {\r\n    setLoading(false);\r\n    onLoad?.();\r\n  };\r\n\r\n  const handleError = () => {\r\n    setLoading(false);\r\n    setError(true);\r\n    if (imageSrc !== fallback) {\r\n      setImageSrc(fallback);\r\n    }\r\n    onError?.();\r\n  };\r\n\r\n  // Custom placeholder\r\n  const customPlaceholder = placeholder || (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#999',\r\n        fontSize: '14px',\r\n        width: '100%',\r\n        height: '100%',\r\n      }}\r\n    >\r\n      <PictureOutlined style={{ fontSize: '24px', marginRight: '8px' }} />\r\n      Загрузка...\r\n    </div>\r\n  );\r\n\r\n  // Убираем srcSet и webp-альтернативу, всегда используем только оригинал\r\n  // const getSrcSet = () => undefined;\r\n\r\n  if (error && imageSrc === fallback) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          backgroundColor: '#f5f5f5',\r\n          color: '#999',\r\n          width: width || '100%',\r\n          height: height || '200px',\r\n          ...style,\r\n        }}\r\n        className={className}\r\n      >\r\n        <PictureOutlined style={{ fontSize: '24px', marginRight: '8px' }} />\r\n        Изображение недоступно\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width, height, ...style }} className={className}>\r\n      {loading && (\r\n        <Skeleton.Image\r\n          active\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            zIndex: 1,\r\n          }}\r\n        />\r\n      )}\r\n      <img\r\n        src={imageSrc}\r\n        alt={alt}\r\n        width={width}\r\n        height={height}\r\n        style={{\r\n          opacity: loading ? 0 : 1,\r\n          transition: 'opacity 0.3s ease',\r\n          width: width || '100%',\r\n          height: height || 'auto',\r\n          ...style,\r\n        }}\r\n        onLoad={handleLoad}\r\n        onError={handleError}\r\n        loading={lazy ? 'lazy' : undefined}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptimizedImage; ","import api from './api';\r\n\r\nexport type Selection = {\r\n  id: number;\r\n  title: string;\r\n  date?: string;\r\n  propertyIds: number[];\r\n  createdAt?: string;\r\n};\r\n\r\nexport async function fetchSelections(): Promise<Selection[]> {\r\n  try {\r\n    const res = await api.get<Selection[]>('/api/selections');\r\n    return res.data;\r\n  } catch (err: any) {\r\n    if (err.response && err.response.status === 404) {\r\n      return [];\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n\r\nexport async function createSelection(title: string, token?: string): Promise<Selection> {\r\n  const headers = token ? { Authorization: `Bearer ${token}` } : undefined;\r\n  const res = await api.post<Selection>('/api/selections', { title, propertyIds: [] }, headers ? { headers } : undefined);\r\n  return res.data;\r\n}\r\n\r\nexport async function addPropertyToSelection(selectionId: number, propertyId: number): Promise<void> {\r\n  const res = await api.get<Selection>(`/api/selections/${selectionId}`);\r\n  const selection = res.data;\r\n  if (!selection.propertyIds.includes(propertyId)) {\r\n    const updated = [...selection.propertyIds, propertyId];\r\n    await api.put(`/api/selections/${selectionId}`, { title: selection.title, propertyIds: updated });\r\n  }\r\n}\r\n\r\nexport async function removePropertyFromSelection(selectionId: number, propertyId: number): Promise<void> {\r\n  const res = await api.get<Selection>(`/api/selections/${selectionId}`);\r\n  const selection = res.data;\r\n  const updated = selection.propertyIds.filter(id => id !== propertyId);\r\n  await api.put(`/api/selections/${selectionId}`, { title: selection.title, propertyIds: updated });\r\n}\r\n\r\nexport async function deleteSelection(selectionId: number): Promise<void> {\r\n  await api.delete(`/api/selections/${selectionId}`);\r\n}\r\n\r\nexport async function getSelectionById(selectionId: number): Promise<Selection & { clientToken?: string }> {\r\n  const res = await api.get(`/api/selections/${selectionId}`);\r\n  return res.data;\r\n}\r\n\r\nexport async function getClientLikes(selectionId: number): Promise<{ propertyId: number; liked: boolean }[]> {\r\n  const res = await api.get(`/api/selections/${selectionId}/client-likes`);\r\n  return res.data;\r\n}\r\n\r\nexport function getClientLink(clientToken: string): string {\r\n  return `${window.location.origin}/client-selection/${clientToken}`;\r\n}\r\n\r\nexport async function downloadSelectionPdf(selectionId: number): Promise<void> {\r\n  const res = await api.get(`/api/selections/${selectionId}/pdf`, { responseType: 'blob' });\r\n  const url = window.URL.createObjectURL(new Blob([res.data], { type: 'application/pdf' }));\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.setAttribute('download', `selection_${selectionId}.pdf`);\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  link.parentNode?.removeChild(link);\r\n  window.URL.revokeObjectURL(url);\r\n}\r\n\r\nexport async function getSelectionByClientToken(token: string): Promise<any> {\r\n  const res = await api.get(`/api/selections/client/${token}`);\r\n  return res.data;\r\n}\r\n\r\nexport async function sendClientLike(token: string, propertyId: number, liked: boolean): Promise<void> {\r\n  await api.post(`/api/selections/client/${token}/like`, { propertyId, liked });\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { Row, Col, Card, Button, Typography, Space, Spin, Empty, Modal, List, message, Tooltip } from 'antd';\r\nimport { FolderOpenOutlined, ClockCircleOutlined, LikeOutlined, DislikeOutlined, LinkOutlined, FilePdfOutlined, QuestionCircleOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport { fetchSelections, Selection, getSelectionById, getClientLikes, getClientLink, downloadSelectionPdf, removePropertyFromSelection, deleteSelection } from '../services/selection.service';\r\nimport AddToSelectionModal from '../components/AddToSelectionModal';\r\nimport { Property } from '../types';\r\nimport { getAllProperties } from '../services/property.service';\r\nimport OptimizedImage from '../components/OptimizedImage';\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface SelectionCardProps {\r\n  sel: any;\r\n  onView: (sel: any) => void;\r\n  onDelete: (sel: any) => void;\r\n}\r\n\r\nconst getPhotoUrl = (photo?: string) => {\r\n  if (!photo) return '/placeholder-property.jpg';\r\n  if (photo.startsWith('/uploads/')) {\r\n    return 'http://localhost:3001' + photo;\r\n  }\r\n  return photo;\r\n};\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({ sel, onView, onDelete }) => {\r\n  // Берём первые 3-4 фото из объектов подборки\r\n  const photos: string[] = (sel.properties || [])\r\n    .flatMap((p: any) => p.photos && p.photos.length > 0 ? [p.photos[0]] : [])\r\n    .slice(0, 4);\r\n\r\n  return (\r\n    <div className=\"wow-selection-card\" onClick={() => onView(sel)}>\r\n      <div className=\"wow-selection-collage\">\r\n        {photos.length === 0 ? (\r\n          <img src=\"/placeholder-property.jpg\" alt=\"placeholder\" className=\"collage-img single\" />\r\n        ) : (\r\n          photos.map((photo, idx) => (\r\n            <img\r\n              key={idx}\r\n              src={getPhotoUrl(photo)}\r\n              alt={`Объект ${idx + 1}`}\r\n              className={`collage-img collage-img-${idx}`}\r\n              style={{ zIndex: 4 - idx }}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"wow-selection-content\">\r\n        <div className=\"wow-selection-title\">{sel.title}</div>\r\n        <div className=\"wow-selection-badges\">\r\n          {sel.isForClient && <span className=\"badge badge-client\">Для клиента</span>}\r\n          {sel.status && <span className=\"badge badge-status\">{sel.status}</span>}\r\n        </div>\r\n        <div className=\"wow-selection-count\">{sel.properties?.length || 0} объектов</div>\r\n        <div className=\"wow-selection-actions\">\r\n          <button className=\"wow-btn\" onClick={e => { e.stopPropagation(); onView(sel); }} title=\"Посмотреть\"><FolderOpenOutlined /></button>\r\n          <button className=\"wow-btn\" onClick={e => { e.stopPropagation(); /* PDF */ }} title=\"Скачать PDF\"><FilePdfOutlined /></button>\r\n          <button className=\"wow-btn danger\" onClick={e => { e.stopPropagation(); onDelete(sel); }} title=\"Удалить\"><DeleteOutlined /></button>\r\n        </div>\r\n      </div>\r\n      <style>{`\r\n        .wow-selection-card {\r\n          background: rgba(255,255,255,0.25);\r\n          box-shadow: 0 8px 32px 0 rgba(31,38,135,0.15);\r\n          backdrop-filter: blur(8px);\r\n          border-radius: 24px;\r\n          border: 1px solid rgba(255,255,255,0.18);\r\n          padding: 0;\r\n          overflow: hidden;\r\n          display: flex;\r\n          flex-direction: column;\r\n          cursor: pointer;\r\n          transition: transform 0.18s cubic-bezier(.4,2,.6,1), box-shadow 0.18s;\r\n          animation: wow-fadein 0.7s cubic-bezier(.4,2,.6,1);\r\n        }\r\n        .wow-selection-card:hover {\r\n          transform: scale(1.035) translateY(-2px);\r\n          box-shadow: 0 12px 36px 0 rgba(31,38,135,0.22);\r\n        }\r\n        @keyframes wow-fadein {\r\n          from { opacity: 0; transform: translateY(30px) scale(0.97); }\r\n          to { opacity: 1; transform: none; }\r\n        }\r\n        .wow-selection-collage {\r\n          position: relative;\r\n          height: 120px;\r\n          background: #f5f7fa;\r\n          border-radius: 24px 24px 0 0;\r\n          overflow: hidden;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: flex-start;\r\n          padding: 12px 0 0 12px;\r\n        }\r\n        .collage-img {\r\n          width: 72px;\r\n          height: 72px;\r\n          object-fit: cover;\r\n          border-radius: 16px;\r\n          box-shadow: 0 2px 8px #e6eaf1;\r\n          position: absolute;\r\n          top: 12px;\r\n          left: 0;\r\n          transition: box-shadow 0.2s, transform 0.2s;\r\n        }\r\n        .collage-img-0 { left: 0; }\r\n        .collage-img-1 { left: 36px; }\r\n        .collage-img-2 { left: 72px; }\r\n        .collage-img-3 { left: 108px; }\r\n        .collage-img.single { position: static; left: 0; }\r\n        .wow-selection-content {\r\n          padding: 24px 24px 18px 24px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          gap: 8px;\r\n        }\r\n        .wow-selection-title {\r\n          font-size: 1.25rem;\r\n          font-weight: 700;\r\n          color: #222;\r\n          margin-bottom: 2px;\r\n        }\r\n        .wow-selection-badges {\r\n          display: flex;\r\n          gap: 8px;\r\n          margin-bottom: 2px;\r\n        }\r\n        .badge {\r\n          display: inline-block;\r\n          padding: 2px 10px;\r\n          border-radius: 12px;\r\n          font-size: 0.85rem;\r\n          font-weight: 600;\r\n          background: #e0e7ff;\r\n          color: #3b3b7a;\r\n        }\r\n        .badge-client {\r\n          background: #d1fae5;\r\n          color: #047857;\r\n        }\r\n        .badge-status {\r\n          background: #fef3c7;\r\n          color: #b45309;\r\n        }\r\n        .wow-selection-count {\r\n          font-size: 1.1rem;\r\n          color: #555;\r\n          margin-bottom: 8px;\r\n        }\r\n        .wow-selection-actions {\r\n          display: flex;\r\n          gap: 12px;\r\n          margin-top: 8px;\r\n        }\r\n        .wow-btn {\r\n          background: #fff;\r\n          border: none;\r\n          border-radius: 50%;\r\n          width: 38px;\r\n          height: 38px;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          font-size: 1.2rem;\r\n          box-shadow: 0 1px 4px #e6eaf1;\r\n          cursor: pointer;\r\n          transition: box-shadow 0.18s, background 0.18s, transform 0.18s;\r\n        }\r\n        .wow-btn:hover {\r\n          background: #e0e7ff;\r\n          box-shadow: 0 2px 8px #b4b8e6;\r\n          transform: scale(1.12);\r\n        }\r\n        .wow-btn.danger:hover {\r\n          background: #fee2e2;\r\n          box-shadow: 0 2px 8px #fca5a5;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction areEqualSelection(prevProps: SelectionCardProps, nextProps: SelectionCardProps) {\r\n  return (\r\n    prevProps.sel.id === nextProps.sel.id &&\r\n    prevProps.sel.updatedAt === nextProps.sel.updatedAt\r\n  );\r\n}\r\n\r\nconst MemoSelectionCard = React.memo(SelectionCard, areEqualSelection);\r\n\r\nconst SelectionPage: React.FC = () => {\r\n  const [selections, setSelections] = useState<Selection[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [viewSelection, setViewSelection] = useState<Selection | null>(null);\r\n  const [allProperties, setAllProperties] = useState<Property[]>([]);\r\n  const [clientToken, setClientToken] = useState<string | null>(null);\r\n  const [clientLikes, setClientLikes] = useState<{ propertyId: number; liked: boolean }[]>([]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchSelections().then(data => {\r\n      setSelections(data);\r\n      setLoading(false);\r\n    });\r\n    getAllProperties().then(setAllProperties);\r\n  }, [modalOpen]);\r\n\r\n  useEffect(() => {\r\n    if (viewSelection) {\r\n      getSelectionById(viewSelection.id).then(sel => {\r\n        setClientToken(sel.clientToken || null);\r\n      });\r\n      getClientLikes(viewSelection.id).then(setClientLikes);\r\n    } else {\r\n      setClientToken(null);\r\n      setClientLikes([]);\r\n    }\r\n  }, [viewSelection]);\r\n\r\n  const handleCreateModalClose = () => {\r\n    setModalOpen(false);\r\n    fetchSelections().then(setSelections);\r\n    if (viewSelection) {\r\n      getSelectionById(viewSelection.id).then(sel => setViewSelection(sel));\r\n    }\r\n  };\r\n\r\n  const handleViewSelection = (sel: Selection) => {\r\n    setViewSelection(sel);\r\n  };\r\n\r\n  const handleViewClose = () => {\r\n    setViewSelection(null);\r\n  };\r\n\r\n  const handleCopyLink = () => {\r\n    if (clientToken) {\r\n      const link = getClientLink(clientToken);\r\n      navigator.clipboard.writeText(link);\r\n      message.success('Ссылка для клиента скопирована!');\r\n    }\r\n  };\r\n\r\n  const handleDownloadPdf = () => {\r\n    if (viewSelection) {\r\n      downloadSelectionPdf(viewSelection.id);\r\n      message.success('PDF-файл формируется и будет скачан');\r\n    }\r\n  };\r\n\r\n  const getLikeStatus = (propertyId: number) => {\r\n    const like = clientLikes.find(l => l.propertyId === propertyId);\r\n    if (!like) return null;\r\n    return like.liked;\r\n  };\r\n\r\n  const handleRemoveProperty = async (propertyId: number) => {\r\n    if (!viewSelection) return;\r\n    await removePropertyFromSelection(viewSelection.id, propertyId);\r\n    message.success('Объект удалён из подборки');\r\n    // Обновить подборку\r\n    getSelectionById(viewSelection.id).then(sel => setViewSelection(sel));\r\n  };\r\n\r\n  const handleDeleteSelection = async () => {\r\n    if (!viewSelection) return;\r\n    Modal.confirm({\r\n      title: 'Удалить подборку?',\r\n      content: 'Вы уверены, что хотите удалить эту подборку? Это действие необратимо.',\r\n      okText: 'Удалить',\r\n      okType: 'danger',\r\n      cancelText: 'Отмена',\r\n      onOk: async () => {\r\n        await deleteSelection(viewSelection.id);\r\n        message.success('Подборка удалена');\r\n        setViewSelection(null);\r\n        fetchSelections().then(setSelections);\r\n      },\r\n    });\r\n  };\r\n\r\n  function getThumbnail(photo: string | undefined): string | undefined {\r\n    if (!photo) return undefined;\r\n    if (photo.startsWith('/uploads/objects/')) {\r\n      const parts = photo.split('/');\r\n      return ['/uploads', 'objects', 'thumbnails', ...parts.slice(3)].join('/');\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: '100%', minHeight: '100vh', padding: '32px 40px 0 40px', background: 'var(--background-color)' }}>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 32 }}>\r\n        <Title level={2} style={{ margin: 0 }}>Подборки объектов</Title>\r\n        <Button data-testid=\"selection-create-btn\" type=\"primary\" size=\"large\" style={{ borderRadius: 10, fontWeight: 600 }} onClick={() => setModalOpen(true)}>\r\n          Создать подборку\r\n        </Button>\r\n      </div>\r\n      {loading ? (\r\n        <Spin size=\"large\" style={{ display: 'block', margin: '60px auto' }} />\r\n      ) : selections.length === 0 ? (\r\n        <Empty description=\"У вас пока нет подборок\" style={{ marginTop: 60 }} />\r\n      ) : (\r\n        <Row gutter={[32, 32]}>\r\n          {selections.map(sel => (\r\n            <Col xs={24} sm={12} md={8} lg={6} key={sel.id} className=\"selection-card\">\r\n              <MemoSelectionCard sel={sel} onView={handleViewSelection} onDelete={(sel) => {\r\n                Modal.confirm({\r\n                  title: 'Удалить подборку?',\r\n                  content: 'Вы уверены, что хотите удалить эту подборку? Это действие необратимо.',\r\n                  okText: 'Удалить',\r\n                  okType: 'danger',\r\n                  cancelText: 'Отмена',\r\n                  onOk: async () => {\r\n                    await deleteSelection(sel.id);\r\n                    message.success('Подборка удалена');\r\n                    if (viewSelection?.id === sel.id) setViewSelection(null);\r\n                    fetchSelections().then(setSelections);\r\n                  },\r\n                });\r\n              }} />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      )}\r\n      <AddToSelectionModal open={modalOpen} onClose={handleCreateModalClose} createOnly />\r\n      <Modal open={!!viewSelection} onCancel={handleViewClose} footer={null} title={viewSelection?.title || ''} width={1100}>\r\n        <div style={{ marginBottom: 16, color: '#888', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n          <span>Создана: {viewSelection?.date}</span>\r\n          <span style={{ display: 'flex', gap: 12 }}>\r\n            {clientToken && (\r\n              <Tooltip title=\"Скопировать ссылку для клиента\">\r\n                <Button icon={<LinkOutlined />} onClick={handleCopyLink} style={{ marginRight: 8 }} />\r\n              </Tooltip>\r\n            )}\r\n            <Tooltip title=\"Скачать PDF\">\r\n              <Button icon={<FilePdfOutlined />} onClick={handleDownloadPdf} />\r\n            </Tooltip>\r\n          </span>\r\n        </div>\r\n        <List\r\n          grid={{ gutter: 32, column: 2 }}\r\n          bordered={false}\r\n          dataSource={viewSelection ? viewSelection.propertyIds.map(id => allProperties.find(p => Number(p.id) === Number(id))).filter((p): p is Property => Boolean(p)) : []}\r\n          renderItem={(item: Property) => {\r\n            if (viewSelection) {\r\n              console.log('propertyIds:', viewSelection.propertyIds);\r\n              console.log('allProperties:', allProperties.map(p => p.id));\r\n            }\r\n            const likeStatus = getLikeStatus(item.id);\r\n            return (\r\n              <List.Item style={{ padding: 0, position: 'relative' }}>\r\n                <div style={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  background: '#fff',\r\n                  border: '1px solid #e6eaf1',\r\n                  borderRadius: 18,\r\n                  boxShadow: '0 2px 8px rgba(40,60,90,0.04)',\r\n                  padding: 0,\r\n                  overflow: 'hidden',\r\n                  minHeight: 180,\r\n                  transition: 'box-shadow 0.2s',\r\n                  cursor: 'pointer',\r\n                  margin: 0,\r\n                  position: 'relative',\r\n                }}>\r\n                  <OptimizedImage\r\n                    src={getThumbnail(item.photos && item.photos[0]) || (item.photos && item.photos[0]) || '/placeholder-property.jpg'}\r\n                    alt={item.title}\r\n                    width={200}\r\n                    height={150}\r\n                    style={{ objectFit: 'cover', borderRadius: '18px 0 0 18px', flexShrink: 0, background: '#f5f5f5' }}\r\n                    lazy={true}\r\n                    fallback=\"/placeholder-property.jpg\"\r\n                  />\r\n                  <div style={{ flex: 1, padding: '20px 28px', display: 'flex', flexDirection: 'column', justifyContent: 'center', position: 'relative' }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 6 }}>\r\n                      <span style={{ fontWeight: 700, fontSize: 20, color: '#222' }}>{item.title}</span>\r\n                      <Tooltip title=\"Удалить объект из подборки\">\r\n                        <Button type=\"text\" danger icon={<DeleteOutlined />} size=\"small\" onClick={() => handleRemoveProperty(item.id)} />\r\n                      </Tooltip>\r\n                    </div>\r\n                    <div style={{ color: '#888', fontSize: 15, marginBottom: 8 }}>{item.address}</div>\r\n                    <div style={{ color: '#222', fontSize: 16, marginBottom: 4 }}><b>Цена:</b> {item.price} ₽</div>\r\n                    <div style={{ color: '#222', fontSize: 16 }}><b>Площадь:</b> {item.area} м²</div>\r\n                    <div style={{ position: 'absolute', top: 18, right: 24, display: 'flex', gap: 8 }}>\r\n                      {likeStatus === true && <Tooltip title=\"Понравилось\"><LikeOutlined style={{ color: '#22c55e', fontSize: 22 }} /></Tooltip>}\r\n                      {likeStatus === false && <Tooltip title=\"Не понравилось\"><DislikeOutlined style={{ color: '#f44336', fontSize: 22 }} /></Tooltip>}\r\n                      {likeStatus === null && <Tooltip title=\"Нет ответа\"><QuestionCircleOutlined style={{ color: '#bbb', fontSize: 22 }} /></Tooltip>}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </List.Item>\r\n            );\r\n          }}\r\n          locale={{ emptyText: 'В подборке пока нет объектов' }}\r\n        />\r\n      </Modal>\r\n      <style>{`\r\n        @media (max-width: 767px) {\r\n          .selection-card {\r\n            margin-bottom: 16px;\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectionPage; ","import React, { useEffect, useState } from 'react';\r\nimport { Modal, Select, Input, Button, message } from 'antd';\r\nimport { fetchSelections, createSelection, addPropertyToSelection, Selection } from '../services/selection.service';\r\n\r\ninterface AddToSelectionModalProps {\r\n  open: boolean;\r\n  propertyId?: number;\r\n  onClose: () => void;\r\n  createOnly?: boolean;\r\n}\r\n\r\nconst AddToSelectionModal: React.FC<AddToSelectionModalProps> = ({ open, propertyId, onClose, createOnly }) => {\r\n  const [selections, setSelections] = useState<Selection[]>([]);\r\n  const [selectedId, setSelectedId] = useState<number | undefined>();\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const [creating, setCreating] = useState(false);\r\n  const [adding, setAdding] = useState(false);\r\n\r\n  // Получаем токен пользователя\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      fetchSelections().then(setSelections);\r\n      setSelectedId(undefined);\r\n      setNewTitle('');\r\n    }\r\n  }, [open]);\r\n\r\n  const handleCreate = async () => {\r\n    if (!newTitle.trim()) return;\r\n    setCreating(true);\r\n    try {\r\n      const newSel = await createSelection(newTitle.trim(), token || undefined);\r\n      setSelections(prev => [...prev, newSel]);\r\n      setSelectedId(newSel.id);\r\n      setNewTitle('');\r\n      message.success('Подборка создана');\r\n      if (createOnly) onClose();\r\n    } finally {\r\n      setCreating(false);\r\n    }\r\n  };\r\n\r\n  const handleAdd = async () => {\r\n    if (!selectedId || !propertyId) return;\r\n    setAdding(true);\r\n    try {\r\n      await addPropertyToSelection(selectedId, propertyId);\r\n      message.success('Объект добавлен в подборку');\r\n      onClose();\r\n    } finally {\r\n      setAdding(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} onCancel={onClose} footer={null} title={createOnly ? 'Создать подборку' : 'Добавить в подборку'} destroyOnHidden>\r\n      <div onClick={e => e.stopPropagation()}>\r\n        {!createOnly && (\r\n          <div style={{ marginBottom: 16 }}>\r\n            <div style={{ marginBottom: 8, fontWeight: 500 }}>Выберите подборку</div>\r\n            <Select\r\n              style={{ width: '100%' }}\r\n              placeholder=\"Выберите подборку\"\r\n              value={selectedId}\r\n              onChange={setSelectedId}\r\n              options={selections.map(s => ({ label: s.title, value: s.id }))}\r\n              allowClear\r\n            />\r\n          </div>\r\n        )}\r\n        <div style={{ marginBottom: 16 }}>\r\n          <div style={{ marginBottom: 8, fontWeight: 500 }}>Или создайте новую</div>\r\n          <Input\r\n            placeholder=\"Название подборки\"\r\n            value={newTitle}\r\n            onChange={e => setNewTitle(e.target.value)}\r\n            style={{ width: 'calc(100% - 110px)', marginRight: 8 }}\r\n            onPressEnter={handleCreate}\r\n          />\r\n          <Button type=\"primary\" onClick={handleCreate} disabled={!newTitle.trim()} loading={creating}>\r\n            Создать\r\n          </Button>\r\n        </div>\r\n        {!createOnly && (\r\n          <Button type=\"primary\" block disabled={!selectedId} onClick={e => { e.stopPropagation(); handleAdd(); }} loading={adding}>\r\n            Добавить\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddToSelectionModal; "],"names":["getAllProperties","async","params","URLSearchParams","filters","Object","entries","forEach","_ref","key","value","undefined","append","toString","response","api","get","Array","isArray","data","properties","getPropertyById","id","getPropertiesByAgent","agentId","getRecentProperties","updatePropertyStatus","status","token","patch","headers","Authorization","src","alt","width","height","className","style","fallback","placeholder","onLoad","onError","lazy","quality","preview","loading","setLoading","useState","error","setError","imageSrc","setImageSrc","useRef","useEffect","PictureOutlined","_jsxs","display","alignItems","justifyContent","backgroundColor","color","children","_jsx","fontSize","marginRight","position","_Skeleton","Image","active","top","left","zIndex","opacity","transition","handleLoad","handleError","fetchSelections","err","createSelection","title","post","propertyIds","addPropertyToSelection","selectionId","propertyId","selection","includes","updated","put","removePropertyFromSelection","filter","deleteSelection","delete","getSelectionById","getClientLikes","getClientLink","clientToken","window","location","origin","downloadSelectionPdf","_link$parentNode","res","responseType","url","URL","createObjectURL","Blob","type","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","revokeObjectURL","getSelectionByClientToken","sendClientLike","liked","Title","_Typography","getPhotoUrl","photo","startsWith","SelectionCard","_sel$properties","sel","onView","onDelete","photos","flatMap","p","length","slice","onClick","map","idx","isForClient","e","stopPropagation","FolderOpenOutlined","FilePdfOutlined","DeleteOutlined","areEqualSelection","prevProps","nextProps","updatedAt","MemoSelectionCard","React","SelectionPage","selections","setSelections","modalOpen","setModalOpen","viewSelection","setViewSelection","allProperties","setAllProperties","setClientToken","clientLikes","setClientLikes","then","handleViewSelection","getThumbnail","split","join","minHeight","padding","background","marginBottom","level","margin","_Button","size","borderRadius","fontWeight","_Spin","_Empty","description","marginTop","_Row","gutter","_Col","xs","sm","md","lg","_Modal","confirm","content","okText","okType","cancelText","onOk","_message","success","AddToSelectionModal","open","onClose","handleCreateModalClose","createOnly","onCancel","handleViewClose","footer","date","gap","_Tooltip","icon","LinkOutlined","handleCopyLink","navigator","clipboard","writeText","handleDownloadPdf","_List","grid","column","bordered","dataSource","find","Number","Boolean","renderItem","item","console","log","likeStatus","like","l","getLikeStatus","Item","border","boxShadow","overflow","cursor","OptimizedImage","objectFit","flexShrink","flex","flexDirection","danger","handleRemoveProperty","address","price","area","right","LikeOutlined","DislikeOutlined","QuestionCircleOutlined","locale","emptyText","selectedId","setSelectedId","newTitle","setNewTitle","creating","setCreating","adding","setAdding","localStorage","getItem","handleCreate","trim","newSel","prev","destroyOnHidden","_Select","onChange","options","s","label","allowClear","_Input","target","onPressEnter","disabled","block","handleAdd"],"sourceRoot":""}