{"version":3,"file":"static/js/5433.e9bf7fc4.chunk.js","mappings":"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","sources":["hooks/useNotifications.ts","pages/SupportDashboardPage.tsx","services/support.service.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport api from '../services/api';\r\nimport { io } from 'socket.io-client';\r\n\r\ninterface NotificationCounters {\r\n  total: number;\r\n  chat: number;\r\n  support: number;\r\n  property: number;\r\n  system: number;\r\n}\r\n\r\nexport const useNotifications = () => {\r\n  const { user } = useAuth();\r\n  const [counters, setCounters] = useState<NotificationCounters>({\r\n    total: 0,\r\n    chat: 0,\r\n    support: 0,\r\n    property: 0,\r\n    system: 0,\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Временные счетчики для просмотренных уведомлений (не сохраняются в localStorage)\r\n  const [viewedNotifications, setViewedNotifications] = useState<Set<string>>(new Set());\r\n\r\n  const fetchCounters = async () => {\r\n    if (!user?.id) return;\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get(`/api/notifications/counters/${user.id}`);\r\n      setCounters(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching notification counters:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (category?: string) => {\r\n    if (!user?.id) return;\r\n    \r\n    try {\r\n      const url = category \r\n        ? `/api/notifications/mark-read/${user.id}/${category}`\r\n        : `/api/notifications/mark-read/${user.id}`;\r\n      await api.patch(url);\r\n      await fetchCounters(); // Обновляем счетчики после отметки как прочитанные\r\n    } catch (error) {\r\n      console.error('Error marking notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  // Функция для обновления счетчиков при изменениях\r\n  const updateCounters = (type: string, action: 'increment' | 'decrement' | 'set', value?: number) => {\r\n    setCounters(prev => {\r\n      const newCounters = { ...prev };\r\n      \r\n      switch (type) {\r\n        case 'chat':\r\n          if (action === 'increment') newCounters.chat++;\r\n          else if (action === 'decrement') {\r\n            if (value !== undefined) {\r\n              newCounters.chat = Math.max(0, newCounters.chat - value);\r\n            } else {\r\n              newCounters.chat = Math.max(0, newCounters.chat - 1);\r\n            }\r\n          }\r\n          else if (action === 'set' && value !== undefined) newCounters.chat = value;\r\n          break;\r\n        case 'support':\r\n          if (action === 'increment') newCounters.support++;\r\n          else if (action === 'decrement') {\r\n            if (value !== undefined) {\r\n              newCounters.support = Math.max(0, newCounters.support - value);\r\n            } else {\r\n              newCounters.support = Math.max(0, newCounters.support - 1);\r\n            }\r\n          }\r\n          else if (action === 'set' && value !== undefined) newCounters.support = value;\r\n          break;\r\n        case 'property':\r\n          if (action === 'increment') newCounters.property++;\r\n          else if (action === 'decrement') {\r\n            if (value !== undefined) {\r\n              newCounters.property = Math.max(0, newCounters.property - value);\r\n            } else {\r\n              newCounters.property = Math.max(0, newCounters.property - 1);\r\n            }\r\n          }\r\n          else if (action === 'set' && value !== undefined) newCounters.property = value;\r\n          break;\r\n        case 'system':\r\n          if (action === 'increment') newCounters.system++;\r\n          else if (action === 'decrement') {\r\n            if (value !== undefined) {\r\n              newCounters.system = Math.max(0, newCounters.system - value);\r\n            } else {\r\n              newCounters.system = Math.max(0, newCounters.system - 1);\r\n            }\r\n          }\r\n          else if (action === 'set' && value !== undefined) newCounters.system = value;\r\n          break;\r\n      }\r\n      \r\n      // Обновляем общий счетчик\r\n      newCounters.total = newCounters.chat + newCounters.support + newCounters.property + newCounters.system;\r\n      \r\n      return newCounters;\r\n    });\r\n  };\r\n\r\n  // Функция для отметки уведомлений как просмотренных (только в сессии)\r\n  const markAsViewed = (notificationIds: string[]) => {\r\n    const newViewed = new Set(viewedNotifications);\r\n    notificationIds.forEach(id => newViewed.add(id));\r\n    setViewedNotifications(newViewed);\r\n  };\r\n\r\n  // Функция для проверки, просмотрено ли уведомление\r\n  const isViewed = (notificationId: string) => {\r\n    return viewedNotifications.has(notificationId);\r\n  };\r\n\r\n  // Функция для очистки просмотренных уведомлений (при смене пользователя или выходе)\r\n  const clearViewedNotifications = () => {\r\n    setViewedNotifications(new Set());\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCounters();\r\n    \r\n    // Подключаемся к WebSocket для получения уведомлений в реальном времени\r\n    const socket = io('http://localhost:3001', {\r\n      transports: ['websocket'],\r\n    });\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Notifications hook connected to WebSocket');\r\n    });\r\n\r\n    // Слушаем уведомления о новых сообщениях в чате\r\n    socket.on('notification', (data) => {\r\n      if (data.type === 'chat_message' || data.category === 'chat') {\r\n        console.log('New chat message notification received');\r\n        updateCounters('chat', 'increment');\r\n      }\r\n      \r\n      // Слушаем уведомления о новых запросах поддержки\r\n      if (data.type === 'support_request' || data.category === 'support') {\r\n        console.log('New support request notification received');\r\n        updateCounters('support', 'increment');\r\n      }\r\n      \r\n      // Слушаем уведомления о решении запросов поддержки\r\n      if (data.type === 'support_resolved') {\r\n        console.log('Support request resolved notification received');\r\n        updateCounters('support', 'decrement');\r\n      }\r\n      \r\n      // Слушаем уведомления о закрытии запросов поддержки\r\n      if (data.type === 'support_closed') {\r\n        console.log('Support request closed notification received');\r\n        updateCounters('support', 'decrement');\r\n      }\r\n    });\r\n\r\n    // Обновляем счетчики каждые 30 секунд как fallback\r\n    const interval = setInterval(fetchCounters, 30000);\r\n    \r\n    return () => {\r\n      socket.disconnect();\r\n      clearInterval(interval);\r\n    };\r\n  }, [user?.id]);\r\n\r\n  return {\r\n    counters,\r\n    loading,\r\n    fetchCounters,\r\n    markAsRead,\r\n    updateCounters,\r\n    markAsViewed,\r\n    isViewed,\r\n    clearViewedNotifications,\r\n  };\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Card, \r\n  Table, \r\n  Button, \r\n  Tag, \r\n  Modal, \r\n  Form, \r\n  Input, \r\n  Typography, \r\n  Row, \r\n  Col, \r\n  Statistic,\r\n  message,\r\n  Space,\r\n  Tooltip,\r\n  Tabs,\r\n  Badge,\r\n  Descriptions,\r\n  Timeline,\r\n  Divider,\r\n  Avatar,\r\n  List\r\n} from 'antd';\r\nimport { \r\n  PhoneOutlined, \r\n  CheckCircleOutlined, \r\n  ClockCircleOutlined, \r\n  CloseCircleOutlined,\r\n  UserOutlined,\r\n  MessageOutlined,\r\n  ReloadOutlined,\r\n  FileTextOutlined,\r\n  InfoCircleOutlined,\r\n  HistoryOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  HomeOutlined,\r\n  ExclamationCircleOutlined\r\n} from '@ant-design/icons';\r\nimport { \r\n  getSupportRequests, \r\n  getPendingSupportRequests, \r\n  assignSupportRequest, \r\n  resolveSupportRequest, \r\n  closeSupportRequest,\r\n  getSupportStats,\r\n  getPendingAgencyAuthorizations,\r\n  getAgencyAuthorizationDetails,\r\n  approveAgencyAuthorization,\r\n  rejectAgencyAuthorization,\r\n  SupportRequest \r\n} from '../services/support.service';\r\nimport { useNotifications } from '../hooks/useNotifications';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\nconst { TabPane } = Tabs;\r\n\r\ninterface UserInfo {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  middleName: string;\r\n  email: string;\r\n  phone: string;\r\n  telegramUsername?: string;\r\n  whatsappNumber?: string;\r\n  agency?: string;\r\n  role: string;\r\n  photo?: string;\r\n  createdAt: string;\r\n  lastLoginAt?: string;\r\n  activeSessions?: Array<{\r\n    id: string;\r\n    deviceInfo: string;\r\n    ipAddress: string;\r\n    lastActivity: string;\r\n  }>;\r\n}\r\n\r\ninterface UserAction {\r\n  id: number;\r\n  action: string;\r\n  details: string;\r\n  timestamp: string;\r\n  severity: 'info' | 'warning' | 'error';\r\n  error?: string;\r\n}\r\n\r\ninterface RequestHistory {\r\n  id: number;\r\n  action: string;\r\n  details: string;\r\n  timestamp: string;\r\n  userId: number;\r\n  userName: string;\r\n}\r\n\r\nconst SupportDashboardPage: React.FC = () => {\r\n  const [requests, setRequests] = useState<SupportRequest[]>([]);\r\n  const [archivedRequests, setArchivedRequests] = useState<SupportRequest[]>([]);\r\n  const [stats, setStats] = useState<any>({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [resolveModalVisible, setResolveModalVisible] = useState(false);\r\n  const [selectedRequest, setSelectedRequest] = useState<SupportRequest | null>(null);\r\n  const [resolveForm] = Form.useForm();\r\n  const { updateCounters } = useNotifications();\r\n  \r\n  // Состояния для новых модальных окон\r\n  const [userInfoModalVisible, setUserInfoModalVisible] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState<UserInfo | null>(null);\r\n  const [userActionsModalVisible, setUserActionsModalVisible] = useState(false);\r\n  const [selectedUserActions, setSelectedUserActions] = useState<UserAction[]>([]);\r\n  const [requestHistoryModalVisible, setRequestHistoryModalVisible] = useState(false);\r\n  const [selectedRequestHistory, setSelectedRequestHistory] = useState<RequestHistory[]>([]);\r\n  \r\n  // Состояния для авторизации агентства\r\n  const [pendingAuthorizations, setPendingAuthorizations] = useState<any[]>([]);\r\n  const [authorizationDetailsModalVisible, setAuthorizationDetailsModalVisible] = useState(false);\r\n  const [selectedAuthorization, setSelectedAuthorization] = useState<any>(null);\r\n  const [rejectModalVisible, setRejectModalVisible] = useState(false);\r\n  const [rejectForm] = Form.useForm();\r\n  \r\n  // Используем состояние для отслеживания просмотренных запросов в сессии (не сохраняется при обновлении)\r\n  const [viewedActiveRequests, setViewedActiveRequests] = useState<Set<number>>(new Set());\r\n  const [viewedArchivedRequests, setViewedArchivedRequests] = useState<Set<number>>(new Set());\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    \r\n    // Подключаемся к WebSocket для получения уведомлений о новых запросах\r\n    const socket = io('http://localhost:3001', {\r\n      transports: ['websocket'],\r\n    });\r\n\r\n    socket.on('connect', () => {\r\n      console.log('Support dashboard connected to WebSocket');\r\n    });\r\n\r\n    // Слушаем уведомления о новых запросах поддержки\r\n    socket.on('notification', (data) => {\r\n      if (data.type === 'support_request' || data.category === 'support') {\r\n        console.log('New support request received, refreshing data...');\r\n        loadData();\r\n        message.info('Поступил новый запрос в службу поддержки');\r\n      }\r\n      \r\n      // Слушаем уведомления о решении и закрытии запросов\r\n      if (data.type === 'support_resolved' || data.type === 'support_closed') {\r\n        console.log('Support request status changed, refreshing data...');\r\n        loadData();\r\n      }\r\n    });\r\n\r\n    // Автоматическое обновление данных каждые 30 секунд\r\n    const interval = setInterval(() => {\r\n      loadData();\r\n    }, 30000);\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const [requestsData, statsData, authorizationsData] = await Promise.all([\r\n        getSupportRequests(),\r\n        getSupportStats(),\r\n        getPendingAgencyAuthorizations()\r\n      ]);\r\n      \r\n      // Разделяем запросы на активные и архивные\r\n      const activeRequests = requestsData.filter(req => req.status !== 'closed');\r\n      const closedRequests = requestsData.filter(req => req.status === 'closed');\r\n      \r\n      setRequests(activeRequests);\r\n      setArchivedRequests(closedRequests);\r\n      setStats(statsData);\r\n      setPendingAuthorizations(authorizationsData);\r\n    } catch (error) {\r\n      message.error('Ошибка при загрузке данных');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    loadData();\r\n    message.success('Данные обновлены');\r\n  };\r\n\r\n  const handleAssign = async (requestId: number) => {\r\n    try {\r\n      await assignSupportRequest(requestId);\r\n      message.success('Запрос назначен вам');\r\n      loadData();\r\n    } catch (error) {\r\n      message.error('Ошибка при назначении запроса');\r\n    }\r\n  };\r\n\r\n  const handleResolve = async (values: { resolution: string }) => {\r\n    if (!selectedRequest) return;\r\n    \r\n    try {\r\n      await resolveSupportRequest(selectedRequest.id, values.resolution);\r\n      message.success('Запрос отмечен как решенный');\r\n      setResolveModalVisible(false);\r\n      resolveForm.resetFields();\r\n      setSelectedRequest(null);\r\n      loadData();\r\n    } catch (error) {\r\n      message.error('Ошибка при решении запроса');\r\n    }\r\n  };\r\n\r\n  const handleClose = async (requestId: number) => {\r\n    try {\r\n      await closeSupportRequest(requestId);\r\n      message.success('Запрос закрыт');\r\n      loadData();\r\n    } catch (error) {\r\n      message.error('Ошибка при закрытии запроса');\r\n    }\r\n  };\r\n\r\n  const handleTabChange = (activeKey: string) => {\r\n    if (activeKey === 'active') {\r\n      // Отмечаем все активные запросы как просмотренные\r\n      const newViewedActive = new Set(viewedActiveRequests);\r\n      requests.forEach(req => newViewedActive.add(req.id));\r\n      setViewedActiveRequests(newViewedActive);\r\n      \r\n      // Уменьшаем счетчик поддержки на количество непросмотренных активных запросов\r\n      const unviewedActive = requests.filter(req => !viewedActiveRequests.has(req.id)).length;\r\n      if (unviewedActive > 0) {\r\n        updateCounters('support', 'decrement', unviewedActive);\r\n        message.info(`Просмотрено ${unviewedActive} новых активных запросов`);\r\n      }\r\n    } else if (activeKey === 'archived') {\r\n      // Отмечаем все архивные запросы как просмотренные\r\n      const newViewedArchived = new Set(viewedArchivedRequests);\r\n      archivedRequests.forEach(req => newViewedArchived.add(req.id));\r\n      setViewedArchivedRequests(newViewedArchived);\r\n      \r\n      // Уменьшаем счетчик поддержки на количество непросмотренных архивных запросов\r\n      const unviewedArchived = archivedRequests.filter(req => !viewedArchivedRequests.has(req.id)).length;\r\n      if (unviewedArchived > 0) {\r\n        updateCounters('support', 'decrement', unviewedArchived);\r\n        message.info(`Просмотрено ${unviewedArchived} новых запросов в архиве`);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRequestClick = (record: SupportRequest) => {\r\n    setSelectedRequest(record);\r\n    setResolveModalVisible(true);\r\n  };\r\n\r\n  const handleUserInfoClick = async (record: SupportRequest) => {\r\n    try {\r\n      // Здесь нужно будет добавить API для получения информации о пользователе\r\n      const mockUserInfo: UserInfo = {\r\n        id: 1,\r\n        firstName: 'Иван',\r\n        lastName: 'Иванов',\r\n        middleName: 'Иванович',\r\n        email: 'ivan@example.com',\r\n        phone: '+7 (999) 123-45-67',\r\n        telegramUsername: '@ivan_ivanov',\r\n        whatsappNumber: '+7 (999) 123-45-67',\r\n        agency: 'ООО \"Риэлт-Сервис\"',\r\n        role: 'agent',\r\n        photo: 'https://via.placeholder.com/150',\r\n        createdAt: '2024-01-01T00:00:00Z',\r\n        lastLoginAt: '2024-01-15T10:30:00Z',\r\n        activeSessions: [\r\n          {\r\n            id: 'session1',\r\n            deviceInfo: 'Chrome 120.0.0.0 on Windows 10',\r\n            ipAddress: '192.168.1.100',\r\n            lastActivity: '2024-01-15T10:30:00Z'\r\n          }\r\n        ]\r\n      };\r\n      \r\n      setSelectedUser(mockUserInfo);\r\n      setUserInfoModalVisible(true);\r\n    } catch (error) {\r\n      message.error('Ошибка при загрузке информации о пользователе');\r\n    }\r\n  };\r\n\r\n  const handleUserActionsClick = async (record: SupportRequest) => {\r\n    try {\r\n      // Здесь нужно будет добавить API для получения действий пользователя\r\n      const mockUserActions: UserAction[] = [\r\n        {\r\n          id: 1,\r\n          action: 'Просмотр объекта',\r\n          details: 'Пользователь просмотрел объект недвижимости ID: 123',\r\n          timestamp: '2024-01-15T10:30:00Z',\r\n          severity: 'info'\r\n        },\r\n        {\r\n          id: 2,\r\n          action: 'Ошибка при загрузке',\r\n          details: 'Ошибка 404 при попытке загрузить изображение объекта',\r\n          timestamp: '2024-01-15T10:25:00Z',\r\n          error: 'Failed to load image: 404 Not Found',\r\n          severity: 'error'\r\n        },\r\n        {\r\n          id: 3,\r\n          action: 'Создание запроса поддержки',\r\n          details: 'Пользователь создал запрос в службу поддержки',\r\n          timestamp: '2024-01-15T10:20:00Z',\r\n          severity: 'info'\r\n        }\r\n      ];\r\n      \r\n      setSelectedUserActions(mockUserActions);\r\n      setUserActionsModalVisible(true);\r\n    } catch (error) {\r\n      message.error('Ошибка при загрузке действий пользователя');\r\n    }\r\n  };\r\n\r\n  // Функции для авторизации агентства\r\n  const handleAuthorizationDetailsClick = async (user: any) => {\r\n    try {\r\n      const details = await getAgencyAuthorizationDetails(user.id);\r\n      setSelectedAuthorization(details);\r\n      setAuthorizationDetailsModalVisible(true);\r\n    } catch (error) {\r\n      message.error('Ошибка при загрузке деталей заявки');\r\n    }\r\n  };\r\n\r\n  const handleApproveAuthorization = async (userId: number) => {\r\n    try {\r\n      await approveAgencyAuthorization(userId);\r\n      message.success('Заявка одобрена');\r\n      setAuthorizationDetailsModalVisible(false);\r\n      setSelectedAuthorization(null);\r\n      loadData();\r\n    } catch (error) {\r\n      message.error('Ошибка при одобрении заявки');\r\n    }\r\n  };\r\n\r\n  const handleRejectAuthorization = async (values: { reason: string }) => {\r\n    if (!selectedAuthorization) return;\r\n    \r\n    try {\r\n      await rejectAgencyAuthorization(selectedAuthorization.user.id, values.reason);\r\n      message.success('Заявка отклонена');\r\n      setRejectModalVisible(false);\r\n      setAuthorizationDetailsModalVisible(false);\r\n      setSelectedAuthorization(null);\r\n      rejectForm.resetFields();\r\n      loadData();\r\n    } catch (error) {\r\n      message.error('Ошибка при отклонении заявки');\r\n    }\r\n  };\r\n\r\n  // Подсчитываем непросмотренные запросы для каждой вкладки\r\n  const unviewedActiveCount = requests.filter(req => !viewedActiveRequests.has(req.id)).length;\r\n  const unviewedArchivedCount = archivedRequests.filter(req => !viewedArchivedRequests.has(req.id)).length;\r\n\r\n  const getStatusTag = (status: string) => {\r\n    switch (status) {\r\n      case 'pending':\r\n        return <Tag color=\"orange\" icon={<ClockCircleOutlined />}>Ожидает</Tag>;\r\n      case 'in_progress':\r\n        return <Tag color=\"blue\" icon={<ClockCircleOutlined />}>В работе</Tag>;\r\n      case 'resolved':\r\n        return <Tag color=\"green\" icon={<CheckCircleOutlined />}>Решено</Tag>;\r\n      case 'closed':\r\n        return <Tag color=\"red\" icon={<CloseCircleOutlined />}>Закрыто</Tag>;\r\n      default:\r\n        return <Tag>{status}</Tag>;\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Статус',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render: (status: string) => getStatusTag(status),\r\n      width: 120,\r\n    },\r\n    {\r\n      title: 'Клиент',\r\n      key: 'client',\r\n      render: (record: SupportRequest) => (\r\n        <div>\r\n          <div><strong>{record.lastName} {record.firstName} {record.middleName}</strong></div>\r\n          <div style={{ color: '#666', fontSize: '12px' }}>\r\n            <PhoneOutlined /> {record.phone}\r\n          </div>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Проблема',\r\n      dataIndex: 'problem',\r\n      key: 'problem',\r\n      render: (problem: string, record: SupportRequest) => (\r\n        <div style={{ maxWidth: 300 }}>\r\n          <Text \r\n            ellipsis={{ tooltip: problem }}\r\n            style={{ cursor: 'pointer', color: '#1890ff' }}\r\n            onClick={() => handleRequestClick(record)}\r\n          >\r\n            {problem}\r\n          </Text>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Дата создания',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n      render: (date: string) => new Date(date).toLocaleString('ru-RU'),\r\n      width: 150,\r\n    },\r\n    {\r\n      title: 'Действия',\r\n      key: 'actions',\r\n      render: (record: SupportRequest) => (\r\n        <Space>\r\n          {record.status === 'pending' && (\r\n            <Button \r\n              type=\"primary\" \r\n              size=\"small\"\r\n              onClick={() => handleAssign(record.id)}\r\n            >\r\n              Взять в работу\r\n            </Button>\r\n          )}\r\n          {record.status === 'in_progress' && (\r\n            <Button \r\n              type=\"primary\" \r\n              size=\"small\"\r\n              icon={<MessageOutlined />}\r\n              onClick={() => {\r\n                setSelectedRequest(record);\r\n                setResolveModalVisible(true);\r\n              }}\r\n            >\r\n              Решить\r\n            </Button>\r\n          )}\r\n          {record.status === 'resolved' && (\r\n            <Button \r\n              type=\"default\" \r\n              size=\"small\"\r\n              onClick={() => handleClose(record.id)}\r\n            >\r\n              Закрыть\r\n            </Button>\r\n          )}\r\n          <Button \r\n            type=\"default\" \r\n            size=\"small\"\r\n            icon={<InfoCircleOutlined />}\r\n            onClick={() => handleUserInfoClick(record)}\r\n            title=\"Информация о пользователе\"\r\n          />\r\n          <Button \r\n            type=\"default\" \r\n            size=\"small\"\r\n            icon={<HistoryOutlined />}\r\n            onClick={() => handleUserActionsClick(record)}\r\n            title=\"Действия пользователя\"\r\n          />\r\n        </Space>\r\n      ),\r\n      width: 200,\r\n    },\r\n  ];\r\n\r\n  const renderRequestsTable = (dataSource: SupportRequest[]) => (\r\n    <Table\r\n      columns={columns}\r\n      dataSource={dataSource}\r\n      rowKey=\"id\"\r\n      loading={loading}\r\n      pagination={{\r\n        pageSize: 10,\r\n        showSizeChanger: true,\r\n        showQuickJumper: true,\r\n      }}\r\n    />\r\n  );\r\n\r\n  // Колонки для таблицы авторизации агентства\r\n  const authorizationColumns = [\r\n    {\r\n      title: 'Пользователь',\r\n      key: 'user',\r\n      render: (record: any) => (\r\n        <div>\r\n          <div><strong>{record.lastName} {record.firstName} {record.middleName}</strong></div>\r\n          <div style={{ color: '#666', fontSize: '12px' }}>\r\n            {record.email}\r\n          </div>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Роль',\r\n      dataIndex: 'role',\r\n      key: 'role',\r\n      render: (role: string) => {\r\n        const roleLabels: Record<string, string> = {\r\n          'director': 'Директор',\r\n          'agent': 'Агент',\r\n          'manager': 'Руководитель',\r\n          'private_realtor': 'Частный риэлтор',\r\n        };\r\n        return <Tag color=\"blue\">{roleLabels[role] || role}</Tag>;\r\n      },\r\n    },\r\n    {\r\n      title: 'Агентство',\r\n      key: 'agency',\r\n      render: (record: any) => (\r\n        <div>\r\n          {record.agency ? (\r\n            <div>\r\n              <div><strong>{record.agency.name}</strong></div>\r\n              {record.agency.logo && (\r\n                <img \r\n                  src={record.agency.logo} \r\n                  alt=\"Логотип\" \r\n                  style={{ width: 30, height: 30, objectFit: 'cover', borderRadius: 4 }}\r\n                />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <span style={{ color: '#999' }}>Не указано</span>\r\n          )}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Дата регистрации',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n      render: (date: string) => new Date(date).toLocaleString('ru-RU'),\r\n      width: 150,\r\n    },\r\n    {\r\n      title: 'Действия',\r\n      key: 'actions',\r\n      render: (record: any) => (\r\n        <Space>\r\n          <Button \r\n            type=\"primary\" \r\n            size=\"small\"\r\n            icon={<InfoCircleOutlined />}\r\n            onClick={() => handleAuthorizationDetailsClick(record)}\r\n          >\r\n            Просмотр\r\n          </Button>\r\n        </Space>\r\n      ),\r\n      width: 120,\r\n    },\r\n  ];\r\n\r\n  const renderAuthorizationTable = () => (\r\n    <Table\r\n      columns={authorizationColumns}\r\n      dataSource={pendingAuthorizations}\r\n      rowKey=\"id\"\r\n      loading={loading}\r\n      pagination={{\r\n        pageSize: 10,\r\n        showSizeChanger: true,\r\n        showQuickJumper: true,\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div style={{ padding: 24 }}>\r\n      <Title level={2}>Панель службы поддержки</Title>\r\n      \r\n      {/* Статистика */}\r\n      <Row gutter={16} style={{ marginBottom: 24 }}>\r\n        <Col span={6}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Всего запросов\"\r\n              value={stats.total || 0}\r\n              valueStyle={{ color: '#3f8600' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Ожидают\"\r\n              value={stats.pending || 0}\r\n              valueStyle={{ color: '#faad14' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"В работе\"\r\n              value={stats.inProgress || 0}\r\n              valueStyle={{ color: '#1890ff' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card>\r\n            <Statistic\r\n              title=\"Решено\"\r\n              value={stats.resolved || 0}\r\n              valueStyle={{ color: '#52c41a' }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Таблица запросов с вкладками */}\r\n      <Card\r\n        title={\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>Запросы в службу поддержки</span>\r\n            <Button \r\n              icon={<ReloadOutlined />} \r\n              onClick={handleRefresh}\r\n              loading={loading}\r\n            >\r\n              Обновить\r\n            </Button>\r\n          </div>\r\n        }\r\n      >\r\n        <Tabs defaultActiveKey=\"active\" onChange={handleTabChange}>\r\n          <TabPane \r\n            tab={\r\n              <span>\r\n                <MessageOutlined />\r\n                Активные запросы\r\n                {unviewedActiveCount > 0 && (\r\n                  <Badge count={unviewedActiveCount} style={{ marginLeft: 8 }} />\r\n                )}\r\n              </span>\r\n            } \r\n            key=\"active\"\r\n          >\r\n            {renderRequestsTable(requests)}\r\n          </TabPane>\r\n          <TabPane \r\n            tab={\r\n              <span>\r\n                <FileTextOutlined />\r\n                Архив\r\n                {unviewedArchivedCount > 0 && (\r\n                  <Badge count={unviewedArchivedCount} style={{ marginLeft: 8 }} />\r\n                )}\r\n              </span>\r\n            } \r\n            key=\"archived\"\r\n          >\r\n            {renderRequestsTable(archivedRequests)}\r\n          </TabPane>\r\n          <TabPane \r\n            tab={\r\n              <span>\r\n                <HomeOutlined />\r\n                Авторизация агентства\r\n                {pendingAuthorizations.length > 0 && (\r\n                  <Badge count={pendingAuthorizations.length} style={{ marginLeft: 8 }} />\r\n                )}\r\n              </span>\r\n            } \r\n            key=\"authorization\"\r\n          >\r\n            {renderAuthorizationTable()}\r\n          </TabPane>\r\n        </Tabs>\r\n      </Card>\r\n\r\n      {/* Модальное окно для решения запроса */}\r\n      <Modal\r\n        title=\"Решение запроса\"\r\n        open={resolveModalVisible}\r\n        onCancel={() => {\r\n          setResolveModalVisible(false);\r\n          setSelectedRequest(null);\r\n          resolveForm.resetFields();\r\n        }}\r\n        footer={null}\r\n      >\r\n        <Form form={resolveForm} onFinish={handleResolve} layout=\"vertical\">\r\n          <Form.Item\r\n            name=\"resolution\"\r\n            label=\"Решение проблемы\"\r\n            rules={[{ required: true, message: 'Введите решение проблемы' }]}\r\n          >\r\n            <TextArea rows={4} placeholder=\"Опишите решение проблемы...\" />\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Space>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Отметить как решенное\r\n              </Button>\r\n              <Button onClick={() => {\r\n                setResolveModalVisible(false);\r\n                setSelectedRequest(null);\r\n                resolveForm.resetFields();\r\n              }}>\r\n                Отмена\r\n              </Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* Модальное окно с информацией о пользователе */}\r\n      <Modal\r\n        title=\"Информация о пользователе\"\r\n        open={userInfoModalVisible}\r\n        onCancel={() => setUserInfoModalVisible(false)}\r\n        footer={null}\r\n        width={600}\r\n      >\r\n        {selectedUser && (\r\n          <div>\r\n            <Row gutter={16} style={{ marginBottom: 16 }}>\r\n              <Col span={8}>\r\n                <Avatar size={64} src={selectedUser.photo} icon={<UserOutlined />} />\r\n              </Col>\r\n              <Col span={16}>\r\n                <Title level={4}>{selectedUser.firstName} {selectedUser.lastName} {selectedUser.middleName}</Title>\r\n                <p><strong>Email:</strong> {selectedUser.email}</p>\r\n                <p><strong>Телефон:</strong> {selectedUser.phone}</p>\r\n                <p><strong>Роль:</strong> {selectedUser.role}</p>\r\n                <p><strong>Агентство:</strong> {selectedUser.agency}</p>\r\n              </Col>\r\n            </Row>\r\n            \r\n            <Divider />\r\n            \r\n            <Title level={5}>Контакты</Title>\r\n            <p><strong>Telegram:</strong> {selectedUser.telegramUsername || 'Не указан'}</p>\r\n            <p><strong>WhatsApp:</strong> {selectedUser.whatsappNumber || 'Не указан'}</p>\r\n            \r\n            <Divider />\r\n            \r\n            <Title level={5}>Активные сессии</Title>\r\n            {selectedUser.activeSessions && selectedUser.activeSessions.length > 0 ? (\r\n              <List\r\n                dataSource={selectedUser.activeSessions}\r\n                renderItem={(session) => (\r\n                  <List.Item>\r\n                    <div>\r\n                      <p><strong>Устройство:</strong> {session.deviceInfo}</p>\r\n                      <p><strong>IP адрес:</strong> {session.ipAddress}</p>\r\n                      <p><strong>Последняя активность:</strong> {new Date(session.lastActivity).toLocaleString('ru-RU')}</p>\r\n                    </div>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            ) : (\r\n              <p>Нет активных сессий</p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Модальное окно с действиями пользователя */}\r\n      <Modal\r\n        title=\"Действия пользователя\"\r\n        open={userActionsModalVisible}\r\n        onCancel={() => setUserActionsModalVisible(false)}\r\n        footer={null}\r\n        width={800}\r\n      >\r\n        <Timeline>\r\n          {selectedUserActions.map((action) => (\r\n            <Timeline.Item\r\n              key={action.id}\r\n              color={action.severity === 'error' ? 'red' : action.severity === 'warning' ? 'orange' : 'blue'}\r\n            >\r\n              <p><strong>{action.action}</strong></p>\r\n              <p>{action.details}</p>\r\n              {action.error && (\r\n                <p style={{ color: '#ff4d4f', fontFamily: 'monospace' }}>{action.error}</p>\r\n              )}\r\n              <p style={{ fontSize: '12px', color: '#666' }}>\r\n                {new Date(action.timestamp).toLocaleString('ru-RU')}\r\n              </p>\r\n            </Timeline.Item>\r\n          ))}\r\n        </Timeline>\r\n      </Modal>\r\n\r\n      {/* Модальное окно с деталями авторизации агентства */}\r\n      <Modal\r\n        title=\"Детали заявки на авторизацию\"\r\n        open={authorizationDetailsModalVisible}\r\n        onCancel={() => setAuthorizationDetailsModalVisible(false)}\r\n        footer={null}\r\n        width={800}\r\n      >\r\n        {selectedAuthorization && (\r\n          <div>\r\n            <Row gutter={16} style={{ marginBottom: 16 }}>\r\n              <Col span={8} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <div style={{ marginBottom: 8, textAlign: 'center' }}>\r\n                  {selectedAuthorization.user.photo ? (\r\n                    <img\r\n                      src={selectedAuthorization.user.photo}\r\n                      alt=\"Аватар пользователя\"\r\n                      style={{ width: 96, height: 96, borderRadius: 16, objectFit: 'cover', marginBottom: 4, border: '1px solid #eee' }}\r\n                    />\r\n                  ) : (\r\n                    <UserOutlined style={{ fontSize: 96, color: '#ccc', marginBottom: 4 }} />\r\n                  )}\r\n                  <div style={{ fontSize: 12, color: '#888' }}>Аватар пользователя</div>\r\n                </div>\r\n                {selectedAuthorization.agency && selectedAuthorization.agency.logo && (\r\n                  <div style={{ textAlign: 'center' }}>\r\n                    <Avatar\r\n                      size={64}\r\n                      src={selectedAuthorization.agency.logo}\r\n                      style={{ background: '#fff', border: '1px solid #eee', marginBottom: 4 }}\r\n                      onError={() => false}\r\n                    />\r\n                    <div style={{ fontSize: 12, color: '#888' }}>Логотип агентства</div>\r\n                  </div>\r\n                )}\r\n              </Col>\r\n              <Col span={16}>\r\n                <Title level={4}>\r\n                  {selectedAuthorization.user.firstName} {selectedAuthorization.user.lastName} {selectedAuthorization.user.middleName}\r\n                </Title>\r\n                <p><strong>Email:</strong> {selectedAuthorization.user.email}</p>\r\n                <p><strong>Телефон:</strong> {selectedAuthorization.user.phone}</p>\r\n                <p><strong>Роль:</strong> {selectedAuthorization.user.role}</p>\r\n                <p><strong>Дата регистрации:</strong> {new Date(selectedAuthorization.user.createdAt).toLocaleString('ru-RU')}</p>\r\n              </Col>\r\n            </Row>\r\n            \r\n            <Divider />\r\n            \r\n            <Title level={5}>Контакты</Title>\r\n            <p><strong>Telegram:</strong> {selectedAuthorization.user.telegramUsername || 'Не указан'}</p>\r\n            <p><strong>WhatsApp:</strong> {selectedAuthorization.user.whatsappNumber || 'Не указан'}</p>\r\n            \r\n            {selectedAuthorization.agency && (\r\n              <>\r\n                <Divider />\r\n                <Title level={5}>Агентство</Title>\r\n                <p><strong>Название:</strong> {selectedAuthorization.agency.name}</p>\r\n                {selectedAuthorization.agency.logo && (\r\n                  <div>\r\n                    <p><strong>Логотип:</strong></p>\r\n                    <img \r\n                      src={selectedAuthorization.agency.logo} \r\n                      alt=\"Логотип агентства\" \r\n                      style={{ maxWidth: 200, maxHeight: 100, objectFit: 'contain' }}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n            \r\n            {selectedAuthorization.user.documents && selectedAuthorization.user.documents.length > 0 && (\r\n              <>\r\n                <Divider />\r\n                <Title level={5}>Документы</Title>\r\n                <List\r\n                  dataSource={selectedAuthorization.user.documents}\r\n                  renderItem={(doc: string, index: number) => (\r\n                    <List.Item>\r\n                      <div>\r\n                        <p><strong>Документ {index + 1}:</strong></p>\r\n                        <a \r\n                          href={doc} \r\n                          target=\"_blank\" \r\n                          rel=\"noopener noreferrer\"\r\n                          onClick={(e) => {\r\n                            // Проверяем, что ссылка не пустая\r\n                            if (!doc || doc === 'null' || doc === 'undefined') {\r\n                              e.preventDefault();\r\n                              message.error('Файл недоступен');\r\n                              return false;\r\n                            }\r\n                          }}\r\n                        >\r\n                          Просмотреть документ\r\n                        </a>\r\n                      </div>\r\n                    </List.Item>\r\n                  )}\r\n                />\r\n              </>\r\n            )}\r\n            \r\n            {selectedAuthorization.endorsements && selectedAuthorization.endorsements.length > 0 && (\r\n              <>\r\n                <Divider />\r\n                <Title level={5}>Поручительства (для частного риэлтора)</Title>\r\n                <List\r\n                  dataSource={selectedAuthorization.endorsements}\r\n                  renderItem={(endorsement: any) => (\r\n                    <List.Item>\r\n                      <div>\r\n                        <p><strong>Агентство:</strong> {endorsement.agency.name}</p>\r\n                        <p><strong>Статус:</strong> {endorsement.status}</p>\r\n                        <p><strong>Дата:</strong> {new Date(endorsement.createdAt).toLocaleString('ru-RU')}</p>\r\n                      </div>\r\n                    </List.Item>\r\n                  )}\r\n                />\r\n              </>\r\n            )}\r\n            \r\n            <Divider />\r\n            \r\n            <div style={{ textAlign: 'center', marginTop: 24 }}>\r\n              <Space>\r\n                <Button \r\n                  type=\"primary\" \r\n                  size=\"large\"\r\n                  onClick={() => handleApproveAuthorization(selectedAuthorization.user.id)}\r\n                >\r\n                  Одобрить заявку\r\n                </Button>\r\n                <Button \r\n                  type=\"default\" \r\n                  size=\"large\"\r\n                  danger\r\n                  onClick={() => setRejectModalVisible(true)}\r\n                >\r\n                  Отклонить заявку\r\n                </Button>\r\n              </Space>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* Модальное окно для отклонения заявки */}\r\n      <Modal\r\n        title=\"Отклонение заявки\"\r\n        open={rejectModalVisible}\r\n        onCancel={() => setRejectModalVisible(false)}\r\n        footer={null}\r\n        width={500}\r\n      >\r\n        <div style={{ marginBottom: 16 }}>\r\n          <p>Вы собираетесь отклонить заявку пользователя:</p>\r\n          <p><strong>{selectedAuthorization?.user?.firstName} {selectedAuthorization?.user?.lastName} {selectedAuthorization?.user?.middleName}</strong></p>\r\n          <p><strong>Email:</strong> {selectedAuthorization?.user?.email}</p>\r\n          <p><strong>Роль:</strong> {selectedAuthorization?.user?.role}</p>\r\n        </div>\r\n        \r\n        <Form form={rejectForm} onFinish={handleRejectAuthorization}>\r\n          <Form.Item\r\n            name=\"reason\"\r\n            label=\"Причина отклонения\"\r\n            rules={[\r\n              { required: true, message: 'Укажите причину отклонения' },\r\n              { min: 10, message: 'Причина должна содержать минимум 10 символов' }\r\n            ]}\r\n          >\r\n            <TextArea \r\n              rows={4} \r\n              placeholder=\"Укажите подробную причину отклонения заявки...\" \r\n              maxLength={500}\r\n              showCount\r\n            />\r\n          </Form.Item>\r\n          <Form.Item style={{ textAlign: 'center', marginTop: 24 }}>\r\n            <Space>\r\n              <Button type=\"default\" onClick={() => setRejectModalVisible(false)}>\r\n                Отмена\r\n              </Button>\r\n              <Button \r\n                type=\"primary\" \r\n                danger \r\n                htmlType=\"submit\"\r\n                icon={<ExclamationCircleOutlined />}\r\n              >\r\n                Отклонить заявку\r\n              </Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SupportDashboardPage; ","import api from './api';\r\n\r\nexport interface CreateSupportRequestData {\r\n  lastName: string;\r\n  firstName: string;\r\n  middleName: string;\r\n  phone: string;\r\n  problem: string;\r\n}\r\n\r\nexport interface SupportRequest {\r\n  id: number;\r\n  userId: number;\r\n  lastName: string;\r\n  firstName: string;\r\n  middleName: string;\r\n  phone: string;\r\n  problem: string;\r\n  status: 'pending' | 'in_progress' | 'resolved' | 'closed';\r\n  assignedTo?: number;\r\n  resolution?: string;\r\n  resolvedAt?: string;\r\n  resolvedBy?: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport const createSupportRequest = async (data: CreateSupportRequestData) => {\r\n  const response = await api.post('/api/support/requests', data);\r\n  return response.data;\r\n};\r\n\r\nexport const getSupportRequests = async (): Promise<SupportRequest[]> => {\r\n  const response = await api.get('/api/support/requests');\r\n  return response.data;\r\n};\r\n\r\nexport const getPendingSupportRequests = async (): Promise<SupportRequest[]> => {\r\n  const response = await api.get('/api/support/requests/pending');\r\n  return response.data;\r\n};\r\n\r\nexport const getSupportRequest = async (id: number): Promise<SupportRequest> => {\r\n  const response = await api.get(`/api/support/requests/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const assignSupportRequest = async (id: number) => {\r\n  const response = await api.patch(`/api/support/requests/${id}/assign`);\r\n  return response.data;\r\n};\r\n\r\nexport const resolveSupportRequest = async (id: number, resolution: string) => {\r\n  const response = await api.patch(`/api/support/requests/${id}/resolve`, { resolution });\r\n  return response.data;\r\n};\r\n\r\nexport const closeSupportRequest = async (id: number) => {\r\n  const response = await api.patch(`/api/support/requests/${id}/close`);\r\n  return response.data;\r\n};\r\n\r\nexport const getSupportStats = async () => {\r\n  const response = await api.get('/api/support/stats');\r\n  return response.data;\r\n};\r\n\r\n// Новые методы для авторизации агентства\r\nexport const getPendingAgencyAuthorizations = async () => {\r\n  const response = await api.get('/api/support/agency-authorization/pending');\r\n  return response.data;\r\n};\r\n\r\nexport const getAgencyAuthorizationDetails = async (userId: number) => {\r\n  const response = await api.get(`/api/support/agency-authorization/${userId}`);\r\n  return response.data;\r\n};\r\n\r\nexport const approveAgencyAuthorization = async (userId: number) => {\r\n  const response = await api.patch(`/api/support/agency-authorization/${userId}/approve`);\r\n  return response.data;\r\n};\r\n\r\nexport const rejectAgencyAuthorization = async (userId: number, reason: string) => {\r\n  const response = await api.patch(`/api/support/agency-authorization/${userId}/reject`, { reason });\r\n  return response.data;\r\n}; "],"names":["useNotifications","user","useAuth","counters","setCounters","useState","total","chat","support","property","system","loading","setLoading","viewedNotifications","setViewedNotifications","Set","fetchCounters","async","id","response","api","get","data","error","console","updateCounters","type","action","value","prev","newCounters","undefined","Math","max","useEffect","socket","io","transports","on","log","category","interval","setInterval","disconnect","clearInterval","markAsRead","url","patch","markAsViewed","notificationIds","newViewed","forEach","add","isViewed","notificationId","has","clearViewedNotifications","Title","Text","_Typography","TextArea","_Input","TabPane","_Tabs","SupportDashboardPage","_selectedAuthorizatio","_selectedAuthorizatio2","_selectedAuthorizatio3","_selectedAuthorizatio4","_selectedAuthorizatio5","requests","setRequests","archivedRequests","setArchivedRequests","stats","setStats","resolveModalVisible","setResolveModalVisible","selectedRequest","setSelectedRequest","resolveForm","_Form","useForm","userInfoModalVisible","setUserInfoModalVisible","selectedUser","setSelectedUser","userActionsModalVisible","setUserActionsModalVisible","selectedUserActions","setSelectedUserActions","requestHistoryModalVisible","setRequestHistoryModalVisible","selectedRequestHistory","setSelectedRequestHistory","pendingAuthorizations","setPendingAuthorizations","authorizationDetailsModalVisible","setAuthorizationDetailsModalVisible","selectedAuthorization","setSelectedAuthorization","rejectModalVisible","setRejectModalVisible","rejectForm","viewedActiveRequests","setViewedActiveRequests","viewedArchivedRequests","setViewedArchivedRequests","loadData","_message","info","requestsData","statsData","authorizationsData","Promise","all","getSupportRequests","getSupportStats","getPendingAgencyAuthorizations","activeRequests","filter","req","status","closedRequests","unviewedActiveCount","length","unviewedArchivedCount","columns","title","dataIndex","key","render","_jsx","_Tag","color","icon","ClockCircleOutlined","children","CheckCircleOutlined","CloseCircleOutlined","getStatusTag","width","record","_jsxs","lastName","firstName","middleName","style","fontSize","PhoneOutlined","phone","problem","maxWidth","ellipsis","tooltip","cursor","onClick","handleRequestClick","date","Date","toLocaleString","_Space","_Button","size","assignSupportRequest","requestId","success","handleAssign","MessageOutlined","closeSupportRequest","handleClose","InfoCircleOutlined","email","telegramUsername","whatsappNumber","agency","role","photo","createdAt","lastLoginAt","activeSessions","deviceInfo","ipAddress","lastActivity","handleUserInfoClick","HistoryOutlined","details","timestamp","severity","handleUserActionsClick","renderRequestsTable","dataSource","_Table","rowKey","pagination","pageSize","showSizeChanger","showQuickJumper","authorizationColumns","name","logo","src","alt","height","objectFit","borderRadius","getAgencyAuthorizationDetails","handleAuthorizationDetailsClick","padding","level","_Row","gutter","marginBottom","_Col","span","_Card","_Statistic","valueStyle","pending","inProgress","resolved","display","justifyContent","alignItems","ReloadOutlined","handleRefresh","defaultActiveKey","onChange","activeKey","newViewedActive","unviewedActive","newViewedArchived","unviewedArchived","tab","_Badge","count","marginLeft","FileTextOutlined","HomeOutlined","_Modal","open","onCancel","resetFields","footer","form","onFinish","resolveSupportRequest","values","resolution","layout","Item","label","rules","required","message","rows","placeholder","htmlType","_Avatar","UserOutlined","_Divider","_List","renderItem","session","_Timeline","map","fontFamily","flexDirection","textAlign","border","background","onError","_Fragment","maxHeight","documents","doc","index","href","target","rel","e","preventDefault","endorsements","endorsement","marginTop","approveAgencyAuthorization","userId","handleApproveAuthorization","danger","rejectAgencyAuthorization","reason","min","maxLength","showCount","ExclamationCircleOutlined","createSupportRequest","post"],"sourceRoot":""}